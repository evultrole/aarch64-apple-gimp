diff -Naur a/bindings/python/Makefile.am b/bindings/python/Makefile.am
--- a/bindings/python/Makefile.am	2015-05-21 13:39:46.000000000 -0600
+++ b/bindings/python/Makefile.am	2021-12-08 18:40:24.000000000 -0700
@@ -1,7 +1,4 @@
 if WITH_GTK2
   GTK_COCOA_DIR = gtkosx_application
-if !SIXTY_FOUR_BIT
-  GTK_CARBON_DIR = gtkmacintegration
-endif
 endif
 SUBDIRS = $(GTK_COCOA_DIR) $(GTK_CARBON_DIR)
diff -Naur a/bindings/python/gtkmacintegration/Makefile.am b/bindings/python/gtkmacintegration/Makefile.am
--- a/bindings/python/gtkmacintegration/Makefile.am	2015-05-21 15:53:55.000000000 -0600
+++ b/bindings/python/gtkmacintegration/Makefile.am	1969-12-31 17:00:00.000000000 -0700
@@ -1,66 +0,0 @@
-AM_CPPFLAGS = -I$(top_srcdir)/src $(PYTHON_INCLUDES)
-
-gtkmacintegrationdir = $(libdir)/python$(PYTHON_VERSION)/site-packages/gtkmacintegration
-
-gtkmacintegration_PYTHON = __init__.py
-gtkmacintegration_LTLIBRARIES =
-
-
-
-headers =						\
-	$(top_srcdir)/src/gtk-mac-menu.h		\
-	$(top_srcdir)/src/gtk-mac-dock.h		\
-	$(top_srcdir)/src/gtk-mac-bundle.h
-
-gtkmacintegration.defs: $(headers)
-	$(PYTHON) $(datadir)/pygobject/2.0/codegen/h2def.py $(headers) > $@
-
-gtkmacintegration.c: gtkmacintegration.defs gtkmacintegration.override
-
-if WITH_GTK2
-gtkmacintegration_LTLIBRARIES += _gtkmacintegration-gtk2.la
-_gtkmacintegration_gtk2_la_CFLAGS =				\
-	$(MAC_CFLAGS)					\
-	$(PYGTK_CFLAGS)
-_gtkmacintegration_gtk2_la_LDFLAGS = -module -avoid-version -export-symbols-regex init_gtkmacintegration
-_gtkmacintegration_gtk2_la_LIBADD =				\
-	$(MAC_LIBS)					\
-	$(PYGTK_LIBS)					\
-	$(top_builddir)/src/libgtkmacintegration-gtk2.la
-
-_gtkmacintegration_gtk2_la_SOURCES =				\
-	gtkmacintegration.c				\
-	gtkmacintegration-module.c
-endif
-if WITH_GTK3
-gtkmacintegration_LTLIBRARIES += _gtkmacintegration-gtk3.la
-_gtkmacintegration_gtk3_la_CFLAGS =				\
-	$(MAC_CFLAGS)					\
-	$(PYGTK_CFLAGS)
-_gtkmacintegration_gtk3_la_LDFLAGS = -module -avoid-version -export-symbols-regex init_gtkmacintegration
-_gtkmacintegration_gtk3_la_LIBADD =				\
-	$(MAC_LIBS)					\
-	$(PYGTK_LIBS)					\
-	$(top_builddir)/src/libgtkmacintegration-gtk3.la
-
-_gtkmacintegration_gtk3_la_SOURCES =				\
-	gtkmacintegration.c				\
-	gtkmacintegration-module.c
-endif
-
-.defs.c: 
-	($(PYGOBJECT_CODEGEN)				\
-	    --register $(PYGTK_DEFSDIR)/gdk-types.defs	\
-	    --register $(PYGTK_DEFSDIR)/gtk-types.defs	\
-	    --override ${srcdir}/$*.override			\
-	    --prefix $* $<) > gen-$*.c			\
-	&& cp gen-$*.c $*.c				\
-	&& rm -f gen-$*.c
-
-CLEANFILES =						\
-	gtkmacintegration.defs				\
-	gtkmacintegration.c
-
-EXTRA_DIST =						\
-	gtkmacintegration.defs				\
-	gtkmacintegration.override
diff -Naur a/bindings/python/gtkmacintegration/__init__.py b/bindings/python/gtkmacintegration/__init__.py
--- a/bindings/python/gtkmacintegration/__init__.py	2013-09-26 11:32:34.000000000 -0600
+++ b/bindings/python/gtkmacintegration/__init__.py	1969-12-31 17:00:00.000000000 -0700
@@ -1,48 +0,0 @@
-# -*- Mode: Python; py-indent-offset: 4 -*-
-
-# Copyright (C) 2007 Imendio AB
-#
-# This library is free software; you can redistribute it and/or
-# modify it under the terms of the GNU Lesser General Public
-# License as published by the Free Software Foundation; version 2.1
-# of the License.
-#
-# This library is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-# Lesser General Public License for more details.
-#
-# You should have received a copy of the GNU Lesser General Public
-# License along with this library; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
-# USA
-
-import sys
-
-if 'gtkmacintegration._gtkmacintegration' in sys.modules:
-    _gtkmacintegration = sys.modules['gtkmacintegration._gtkmacintegration']
-else:
-    from gtkmacintegration import _gtkmacintegration
-
-from gtkmacintegration._gtkmacintegration import *
-
-# Wrapper class for the menu
-class MacMenu:
-    def set_menu_bar(self, menubar):
-        gtk_mac_menu_set_menu_bar(menubar)
-
-    def set_quit_menu_item(self, item):
-        gtk_mac_menu_set_quit_menu_item(item)
-
-    def add_app_menu_group(self):
-        return MacMenuAppGroup(gtk_mac_menu_add_app_menu_group())
-
-    def sync(self, menubar):
-        return gtk_mac_menu_sync(menubar)
-
-class MacMenuAppGroup:
-    def __init__(self, group):
-        self._group = group
-
-    def add_app_menu_item(self, item, label=None):
-        gtk_mac_menu_add_app_menu_item(self._group, item, label)
diff -Naur a/bindings/python/gtkmacintegration/gtkmacintegration-module.c b/bindings/python/gtkmacintegration/gtkmacintegration-module.c
--- a/bindings/python/gtkmacintegration/gtkmacintegration-module.c	2013-09-26 11:32:34.000000000 -0600
+++ b/bindings/python/gtkmacintegration/gtkmacintegration-module.c	1969-12-31 17:00:00.000000000 -0700
@@ -1,24 +0,0 @@
-#include <pygobject.h>
-
-void gtkmacintegration_register_classes (PyObject *d);
-
-extern PyMethodDef gtkmacintegration_functions[];
-
-DL_EXPORT(void)
-init_gtkmacintegration (void)
-{
-  PyObject *m, *d;
-
-  init_pygobject ();
-
-  m = Py_InitModule ("gtkmacintegration._gtkmacintegration",
-                     gtkmacintegration_functions);
-  d = PyModule_GetDict (m);
-
-  gtkmacintegration_register_classes (d);
-
-  if (PyErr_Occurred ()) {
-    PyErr_Print();
-    Py_FatalError ("can't initialize module gtkmacintegration:");
-  }
-}
diff -Naur a/bindings/python/gtkmacintegration/gtkmacintegration.override b/bindings/python/gtkmacintegration/gtkmacintegration.override
--- a/bindings/python/gtkmacintegration/gtkmacintegration.override	2013-09-26 11:32:34.000000000 -0600
+++ b/bindings/python/gtkmacintegration/gtkmacintegration.override	1969-12-31 17:00:00.000000000 -0700
@@ -1,59 +0,0 @@
-/* -*- Mode: C; c-basic-offset: 4 -*- */
-%%
-headers
-#include <Python.h>
-#include <pygtk/pygtk.h>
-#include <gtk-mac-menu.h>
-#include <gtk-mac-dock.h>
-#include <gtk-mac-bundle.h>
-%%
-modulename gtkmacintegration
-%%
-import gobject.GObject as PyGObject_Type
-import gtk.gdk.Pixbuf as PyGdkPixbuf_Type
-import gtk.MenuShell as PyGtkMenuShell_Type
-import gtk.MenuItem as PyGtkMenuItem_Type
-import gtk.Window as PyGtkWindow_Type
-%%
-ignore-glob
-  *_get_type
-%%
-override gtk_mac_menu_add_app_menu_group noargs
-static PyObject*
-_wrap_gtk_mac_menu_add_app_menu_group (PyGObject *self)
-{
-    GtkMacMenuGroup *group;
-    PyObject *ret;
-
-    group = gtk_mac_menu_add_app_menu_group ();
-
-    ret = PyCObject_FromVoidPtr ((void *) group, NULL);
-
-    return ret;
-}
-%%
-override gtk_mac_menu_add_app_menu_item kwargs
-static PyObject*
-_wrap_gtk_mac_menu_add_app_menu_item (PyGObject *self, PyObject *args, PyObject *kwargs)
-{
-    static char *kwlist[] = { "group", "item", "label", NULL };
-    PyObject *pygroup;
-    PyObject *pyitem;
-    char *label = NULL;
-    GtkMacMenuGroup *group;
-    GtkMenuItem *item;
-
-    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO!z:add_app_menu_item", kwlist,
-                                     &pygroup,
-                                     &PyGtkMenuItem_Type, &pyitem,
-                                     &label))
-        return NULL;
-
-    group = PyCObject_AsVoidPtr (pygroup);
-    item = GTK_MENU_ITEM (pygobject_get (pyitem));
-
-    gtk_mac_menu_add_app_menu_item (group, item, label);
-
-    Py_INCREF (Py_None);
-    return Py_None;
-}
diff -Naur a/configure.ac b/configure.ac
--- a/configure.ac	2018-09-25 11:21:34.000000000 -0600
+++ b/configure.ac	2021-12-08 18:40:24.000000000 -0700
@@ -11,24 +11,13 @@
 
 GTK_MAC_INTEGRATION_LT_VERSION=3:2:1
 AC_SUBST(GTK_MAC_INTEGRATION_LT_VERSION)
-AC_CONFIG_SRCDIR(src/gtk-mac-menu.c)
+AC_CONFIG_SRCDIR(src/gtkosxapplication.c)
 AC_CONFIG_MACRO_DIR(m4)
 AM_INIT_AUTOMAKE([1.11 dist-bzip2 subdir-objects no-define foreign])
 
 AC_CONFIG_HEADERS(config.h)
 
 AM_DISABLE_STATIC
-AC_MSG_CHECKING([Bitness])
-AC_PREPROC_IFELSE(
-    [AC_LANG_PROGRAM([[]],[[#ifndef __x86_64__
-#error
-#endif
-	]])],
-    [AC_MSG_RESULT([64-BIT])
-     sixty_four_bit=yes],
-    [AC_MSG_RESULT([32-Bit])
-     sixty_four_bit=no])
-AM_CONDITIONAL([SIXTY_FOUR_BIT], [test x$sixty_four_bit = xyes])
 AC_ISC_POSIX
 AC_PROG_CC
 AC_HEADER_STDC
@@ -107,7 +96,6 @@
     src/Makefile
     bindings/Makefile
     bindings/python/Makefile
-    bindings/python/gtkmacintegration/Makefile
     bindings/python/gtkosx_application/Makefile
     data/Makefile
     docs/Makefile
diff -Naur a/docs/reference/Makefile.am b/docs/reference/Makefile.am
--- a/docs/reference/Makefile.am	2018-09-25 15:21:53.000000000 -0600
+++ b/docs/reference/Makefile.am	2021-12-08 18:40:24.000000000 -0700
@@ -53,10 +53,6 @@
 # Header files or dirs to ignore when scanning. Use base file/dir names
 # e.g. IGNORE_HFILES=gtkdebug.h gtkintl.h private_code
 IGNORE_HFILES=				\
-	gtk-mac-integration.h		\
-	gtk-mac-bundle.h		\
-	gtk-mac-dock.h			\
-	gtk-mac-menu.h			\
 	gtk-mac-image-utils.h 		\
 	gtk-mac-private.h		\
 	getlabel.h			\
diff -Naur a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am	2018-09-25 10:35:07.000000000 -0600
+++ b/src/Makefile.am	2021-12-08 18:40:24.000000000 -0700
@@ -14,9 +14,6 @@
 	gtkosxapplication_quartz.c		\
 	gtkosxapplication.c				\
 	gtkosx-image.c					\
-	gtk-mac-dock.c					\
-	gtk-mac-bundle.c				\
-	gtk-mac-menu.c					\
 	gtk-mac-image-utils.c
 
 HEADER = \
@@ -26,11 +23,7 @@
 	GNSMenuBar.h              \
 	GNSMenuDelegate.h         \
 	GNSMenuItem.h             \
-	gtk-mac-bundle.h          \
-	gtk-mac-dock.h            \
 	gtk-mac-image-utils.h     \
-	gtk-mac-integration.h     \
-	gtk-mac-menu.h            \
 	gtk-mac-private.h         \
 	GtkApplicationDelegate.h  \
 	GtkApplicationNotify.h    \
@@ -57,13 +50,7 @@
 endif
 
 integration_includedir = $(includedir)/gtkmacintegration
-integration_include_HEADERS =				\
-	gtk-mac-integration.h				\
-	gtkosxapplication.h				\
-	gtk-mac-menu.h					\
-	gtk-mac-dock.h					\
-	gtk-mac-bundle.h
-
+integration_include_HEADERS = gtkosxapplication.h
 noinst_PROGRAMS =
 test_integration_gtk3_CFLAGS =
 if WITH_GTK3
diff -Naur a/src/gtk-mac-bundle.c b/src/gtk-mac-bundle.c
--- a/src/gtk-mac-bundle.c	2014-02-02 15:44:27.000000000 -0700
+++ b/src/gtk-mac-bundle.c	1969-12-31 17:00:00.000000000 -0700
@@ -1,381 +0,0 @@
-/* GTK+ Integration for app bundles.
- *
- * Copyright (C) 2007-2008 Imendio AB
- *
- * This library is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 2.1 of the License, or
- * (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-/* TODO: Add command line parsing and remove any
- * -psn_... arguments?
- */
-
-#ifndef __x86_64__
-#include <gtk/gtk.h>
-#include <Carbon/Carbon.h>
-
-#include "gtk-mac-bundle.h"
-
-typedef struct GtkMacBundlePriv GtkMacBundlePriv;
-
-struct GtkMacBundlePriv
-{
-  CFBundleRef  cf_bundle;
-  gchar       *path;
-  gchar       *id;
-  gchar       *datadir;
-  gchar       *localedir;
-  UInt32       type;
-  UInt32       creator;
-};
-
-static void   mac_bundle_finalize              (GObject      *object);
-static gchar *cf_string_to_utf8                (CFStringRef   str);
-static void   mac_bundle_set_environment_value (GtkMacBundle *bundle,
-    const gchar  *key,
-    const gchar  *value);
-
-static GtkMacBundle *global_bundle;
-
-G_DEFINE_TYPE (GtkMacBundle, gtk_mac_bundle, G_TYPE_OBJECT)
-
-#define GET_PRIV(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GTK_TYPE_MAC_BUNDLE, GtkMacBundlePriv))
-
-static void
-gtk_mac_bundle_class_init (GtkMacBundleClass *class)
-{
-  GObjectClass *object_class = G_OBJECT_CLASS (class);
-
-  object_class->finalize = mac_bundle_finalize;
-
-  g_type_class_add_private (object_class, sizeof (GtkMacBundlePriv));
-}
-
-static void
-gtk_mac_bundle_init (GtkMacBundle *bundle)
-{
-  GtkMacBundlePriv *priv = GET_PRIV (bundle);
-  CFURLRef          cf_url;
-  CFStringRef       cf_string;
-  CFDictionaryRef   cf_dict;
-
-  priv->cf_bundle = CFBundleGetMainBundle ();
-  if (!priv->cf_bundle)
-    return;
-
-  CFRetain (priv->cf_bundle);
-
-  /* Bundle or binary location. */
-  cf_url = CFBundleCopyBundleURL (priv->cf_bundle);
-  cf_string = CFURLCopyFileSystemPath (cf_url, kCFURLPOSIXPathStyle);
-  priv->path = cf_string_to_utf8 (cf_string);
-  CFRelease (cf_string);
-  CFRelease (cf_url);
-
-  /* Package info. */
-  CFBundleGetPackageInfo (priv->cf_bundle, &priv->type, &priv->creator);
-
-  /* Identifier. */
-  cf_string = CFBundleGetIdentifier (priv->cf_bundle);
-  if (cf_string)
-    priv->id = cf_string_to_utf8 (cf_string);
-
-  /* Get non-localized keys. */
-  cf_dict = CFBundleGetInfoDictionary (priv->cf_bundle);
-  if (cf_dict)
-    {
-      CFDictionaryRef   env_dict;
-      CFIndex           n_keys, i;
-      const void      **keys;
-      const void      **values;
-
-      env_dict = (CFDictionaryRef) CFDictionaryGetValue (cf_dict, CFSTR ("LSEnvironment"));
-      if (env_dict)
-        {
-          n_keys = CFDictionaryGetCount (env_dict);
-
-          keys = (const void **) g_new (void *, n_keys);
-          values = (const void **) g_new (void *, n_keys);
-
-          CFDictionaryGetKeysAndValues (env_dict, keys, values);
-
-          for (i = 0; i < n_keys; i++)
-            {
-              gchar *key;
-              gchar *value;
-
-              key = cf_string_to_utf8 ((CFStringRef) keys[i]);
-              value = cf_string_to_utf8 ((CFStringRef) values[i]);
-
-              mac_bundle_set_environment_value (bundle, key, value);
-
-              g_free (key);
-              g_free (value);
-            }
-
-          g_free (keys);
-          g_free (values);
-        }
-    }
-}
-
-static void
-mac_bundle_finalize (GObject *object)
-{
-  GtkMacBundlePriv *priv;
-
-  priv = GET_PRIV (object);
-
-  g_free (priv->path);
-  g_free (priv->id);
-  g_free (priv->datadir);
-  g_free (priv->localedir);
-
-  CFRelease (priv->cf_bundle);
-
-  G_OBJECT_CLASS (gtk_mac_bundle_parent_class)->finalize (object);
-}
-
-GtkMacBundle *
-gtk_mac_bundle_new (void)
-{
-  return g_object_new (GTK_TYPE_MAC_BUNDLE, NULL);
-}
-
-GtkMacBundle *
-gtk_mac_bundle_get_default (void)
-{
-  if (!global_bundle)
-    global_bundle = gtk_mac_bundle_new ();
-
-  return global_bundle;
-}
-
-static gchar *
-cf_string_to_utf8 (CFStringRef str)
-{
-  CFIndex  len;
-  gchar   *ret;
-
-  len = CFStringGetMaximumSizeForEncoding (CFStringGetLength (str),
-        kCFStringEncodingUTF8) + 1;
-
-  ret = g_malloc (len);
-  ret[len] = '\0';
-
-  if (CFStringGetCString (str, ret, len, kCFStringEncodingUTF8))
-    return ret;
-
-  g_free (ret);
-  return NULL;
-}
-
-static void
-mac_bundle_set_environment_value (GtkMacBundle *bundle,
-                                  const gchar  *key,
-                                  const gchar  *value)
-{
-  GtkMacBundlePriv *priv = GET_PRIV (bundle);
-  GRegex           *regex;
-  gchar            *new_value;
-
-  regex = g_regex_new ("@executable_path", 0, 0, NULL);
-
-  new_value = g_regex_replace_literal (regex,
-                                       value,
-                                       -1,
-                                       0,
-                                       priv->path,
-                                       0, NULL);
-
-  g_print ("%s => %s\n", value, new_value);
-
-  if (new_value)
-    value = new_value;
-
-
-  g_setenv (key, value, TRUE);
-
-  g_free (new_value);
-  g_regex_unref (regex);
-}
-
-const gchar *
-gtk_mac_bundle_get_id (GtkMacBundle *bundle)
-{
-  GtkMacBundlePriv *priv = GET_PRIV (bundle);
-
-  return priv->id;
-}
-
-const gchar *
-gtk_mac_bundle_get_path (GtkMacBundle *bundle)
-{
-  GtkMacBundlePriv *priv = GET_PRIV (bundle);
-
-  return priv->path;
-}
-
-gboolean
-gtk_mac_bundle_get_is_app_bundle (GtkMacBundle *bundle)
-{
-  GtkMacBundlePriv *priv = GET_PRIV (bundle);
-
-  return (priv->type == 'APPL' && priv->id);
-}
-
-const gchar *
-gtk_mac_bundle_get_datadir (GtkMacBundle *bundle)
-{
-  GtkMacBundlePriv *priv = GET_PRIV (bundle);
-
-  if (!gtk_mac_bundle_get_is_app_bundle (bundle))
-    return NULL;
-
-  if (!priv->datadir)
-    {
-      priv->datadir = g_build_filename (priv->path,
-                                        "Contents",
-                                        "Resources",
-                                        "share",
-                                        NULL);
-    }
-
-  return priv->datadir;
-}
-
-const gchar *
-gtk_mac_bundle_get_localedir (GtkMacBundle *bundle)
-{
-  GtkMacBundlePriv *priv = GET_PRIV (bundle);
-
-  if (!gtk_mac_bundle_get_is_app_bundle (bundle))
-    return NULL;
-
-  if (!priv->localedir)
-    {
-      priv->localedir = g_build_filename (priv->path,
-                                          "Contents",
-                                          "Resources",
-                                          "share",
-                                          "locale",
-                                          NULL);
-    }
-
-  return priv->localedir;
-}
-
-void
-gtk_mac_bundle_setup_environment (GtkMacBundle *bundle)
-{
-  GtkMacBundlePriv *priv = GET_PRIV (bundle);
-  gchar            *resources;
-  gchar            *share, *lib, *etc;
-  gchar            *etc_xdg, *etc_immodules, *etc_gtkrc;
-  gchar            *etc_pixbuf, *etc_pangorc;
-  const gchar      *rc_files;
-
-  if (!gtk_mac_bundle_get_is_app_bundle (bundle))
-    return;
-
-  resources = g_build_filename (priv->path,
-                                "Contents",
-                                "Resources",
-                                NULL);
-
-  share = g_build_filename (resources, "share", NULL);
-  lib = g_build_filename (resources, "lib", NULL);
-  etc = g_build_filename (resources, "etc", NULL);
-  etc_xdg = g_build_filename (etc, "xdg", NULL);
-  etc_immodules = g_build_filename (etc, "gtk-2.0", "gtk.immodules", NULL);
-  etc_gtkrc = g_build_filename (etc, "gtk-2.0", "gtkrc", NULL);
-  etc_pixbuf = g_build_filename (etc, "gtk-2.0", "gdk-pixbuf.loaders", NULL);
-  etc_pangorc = g_build_filename (etc, "pango", "pangorc", NULL);
-
-  g_setenv ("XDG_CONFIG_DIRS", etc_xdg, TRUE);
-  g_setenv ("XDG_DATA_DIRS", share, TRUE);
-  g_setenv ("GTK_DATA_PREFIX", share, TRUE);
-  g_setenv ("GTK_EXE_PREFIX", resources, TRUE);
-  g_setenv ("GTK_PATH_PREFIX", resources, TRUE);
-
-  /* Append the normal gtkrc path to allow customizing the theme from
-   * Info.plist.
-   */
-  rc_files = g_getenv ("GTK2_RC_FILES");
-  if (rc_files)
-    {
-      gchar *tmp;
-
-      tmp = g_strdup_printf ("%s:%s", rc_files, etc_gtkrc);
-      g_setenv ("GTK2_RC_FILES", tmp, TRUE);
-      g_free (tmp);
-    }
-  else
-    g_setenv ("GTK2_RC_FILES", etc_gtkrc, TRUE);
-
-  g_setenv ("GTK_IM_MODULE_FILE", etc_immodules, TRUE);
-  g_setenv ("GDK_PIXBUF_MODULE_FILE", etc_pixbuf, TRUE);
-  g_setenv ("PANGO_RC_FILE", etc_pangorc, TRUE);
-  g_setenv ("CHARSETALIASDIR", lib, TRUE);
-
-  // could add FONTCONFIG_FILE
-
-  /*export LANG="\`grep \"\\\`defaults read .GlobalPreferences AppleCollationOrder \
-  2>&1\\\`_\" /usr/share/locale/locale.alias | tail -n1 | sed 's/\./ /' | \
-  awk '{print \$2}'\`.UTF-8"*/
-
-  g_free (share);
-  g_free (lib);
-  g_free (etc);
-  g_free (etc_xdg);
-  g_free (etc_immodules);
-  g_free (etc_gtkrc);
-  g_free (etc_pixbuf);
-  g_free (etc_pangorc);
-}
-
-gchar *
-gtk_mac_bundle_get_resource_path (GtkMacBundle *bundle,
-                                  const gchar  *name,
-                                  const gchar  *type,
-                                  const gchar  *subdir)
-{
-  GtkMacBundlePriv *priv;
-  CFURLRef          cf_url;
-  CFStringRef       cf_string;
-  gchar            *path;
-
-  if (!bundle)
-    bundle = gtk_mac_bundle_get_default ();
-
-  priv = GET_PRIV (bundle);
-
-  if (!priv->cf_bundle)
-    return NULL;
-
-  // FIXME: Look at using CFURLGetFileSystemRepresentation (urlcf_, true, (UInt8*)outPathName, 256)
-
-  // FIXME: crate real cfstring here...
-  cf_url = CFBundleCopyResourceURL (priv->cf_bundle,
-                                    CFSTR ("name"), CFSTR ("type"), CFSTR ("subdir"));
-  cf_string = CFURLCopyFileSystemPath (cf_url, kCFURLPOSIXPathStyle);
-  path = cf_string_to_utf8 (cf_string);
-  CFRelease (cf_string);
-  CFRelease (cf_url);
-
-  return path;
-}
-
-#endif //__x86_64__
diff -Naur a/src/gtk-mac-bundle.h b/src/gtk-mac-bundle.h
--- a/src/gtk-mac-bundle.h	2013-09-26 11:32:34.000000000 -0600
+++ b/src/gtk-mac-bundle.h	1969-12-31 17:00:00.000000000 -0700
@@ -1,64 +0,0 @@
-/* GTK+ Integration for app bundles.
- *
- * Copyright (C) 2007-2008 Imendio AB
- *
- * This library is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 2.1 of the License, or
- * (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#ifndef __GTK_MAC_BUNDLE_H__
-#define __GTK_MAC_BUNDLE_H__
-
-#ifndef __x86_64__
-#include <glib-object.h>
-
-G_BEGIN_DECLS
-
-#define GTK_TYPE_MAC_BUNDLE            (gtk_mac_bundle_get_type ())
-#define GTK_MAC_BUNDLE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_MAC_BUNDLE, GtkMacBundle))
-#define GTK_MAC_BUNDLE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_MAC_BUNDLE, GtkMacBundleClass))
-#define GTK_IS_MAC_BUNDLE(obj)	       (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_MAC_BUNDLE))
-#define GTK_IS_MAC_BUNDLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MAC_BUNDLE))
-#define GTK_MAC_BUNDLE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_MAC_BUNDLE, GtkMacBundleClass))
-
-typedef struct _GtkMacBundle      GtkMacBundle;
-typedef struct _GtkMacBundleClass GtkMacBundleClass;
-
-struct _GtkMacBundle {
-  GObject parent_instance;
-};
-
-struct _GtkMacBundleClass {
-  GObjectClass parent_class;
-};
-
-GType         gtk_mac_bundle_get_type          (void);
-GtkMacBundle *gtk_mac_bundle_new               (void);
-GtkMacBundle *gtk_mac_bundle_get_default       (void);
-void          gtk_mac_bundle_setup_environment (GtkMacBundle *bundle);
-const gchar * gtk_mac_bundle_get_id            (GtkMacBundle *bundle);
-const gchar * gtk_mac_bundle_get_path          (GtkMacBundle *bundle);
-gboolean      gtk_mac_bundle_get_is_app_bundle (GtkMacBundle *bundle);
-const gchar * gtk_mac_bundle_get_localedir     (GtkMacBundle *bundle);
-const gchar * gtk_mac_bundle_get_datadir       (GtkMacBundle *bundle);
-gchar *       gtk_mac_bundle_get_resource_path (GtkMacBundle *bundle,
-                                                const gchar  *name,
-                                                const gchar  *type,
-                                                const gchar  *subdir);
-
-G_END_DECLS
-
-#endif /* __x86_64__*/
-#endif /* __GTK_MAC_BUNDLE_H__ */
diff -Naur a/src/gtk-mac-dock.c b/src/gtk-mac-dock.c
--- a/src/gtk-mac-dock.c	2018-05-26 18:20:26.000000000 -0600
+++ b/src/gtk-mac-dock.c	1969-12-31 17:00:00.000000000 -0700
@@ -1,480 +0,0 @@
-/* GTK+ Integration for the Mac OS X Dock.
- *
- * Copyright (C) 2007, 2008 Imendio AB
- *
- * This library is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 2.1 of the License, or
- * (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#ifndef __x86_64__
-/* FIXME: Add example like this to docs for the open documents stuff:
-
-    <key>CFBundleDocumentTypes</key>
-    <array>
-      <dict>
-        <key>CFBundleTypeExtensions</key>
-        <array>
-          <string>txt</string>
-        </array>
-      </dict>
-    </array>
-
-*/
-
-#include <config.h>
-#include <Carbon/Carbon.h>
-#include <sys/param.h>
-#include <gtk/gtk.h>
-
-#include "gtk-mac-dock.h"
-#include "gtk-mac-bundle.h"
-#include "gtk-mac-image-utils.h"
-#include "gtk-mac-private.h"
-
-enum
-{
-  CLICKED,
-  QUIT_ACTIVATE,
-  OPEN_DOCUMENTS,
-  LAST_SIGNAL
-};
-
-static guint signals[LAST_SIGNAL] = { 0 };
-
-typedef struct GtkMacDockPriv GtkMacDockPriv;
-
-struct GtkMacDockPriv
-{
-  glong id;
-};
-
-static void  mac_dock_finalize                  (GObject          *object);
-static OSErr mac_dock_handle_quit               (const AppleEvent *inAppleEvent,
-    AppleEvent       *outAppleEvent,
-    long              inHandlerRefcon);
-static OSErr mac_dock_handle_open_documents     (const AppleEvent *inAppleEvent,
-    AppleEvent       *outAppleEvent,
-    long              inHandlerRefcon);
-static OSErr mac_dock_handle_open_application   (const AppleEvent *inAppleEvent,
-    AppleEvent       *outAppleEvent,
-    long              inHandlerRefcon);
-static OSErr mac_dock_handle_reopen_application (const AppleEvent *inAppleEvent,
-    AppleEvent       *outAppleEvent,
-    long              inHandlerRefcon);
-
-G_DEFINE_TYPE (GtkMacDock, gtk_mac_dock, G_TYPE_OBJECT)
-
-#define GET_PRIV(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GTK_TYPE_MAC_DOCK, GtkMacDockPriv))
-
-static GList      *handlers;
-static GtkMacDock *global_dock;
-
-static void
-gtk_mac_dock_class_init (GtkMacDockClass *class)
-{
-  GObjectClass *object_class = G_OBJECT_CLASS (class);
-
-  object_class->finalize = mac_dock_finalize;
-
-  signals[CLICKED] =
-    g_signal_new ("clicked",
-                  GTK_TYPE_MAC_DOCK,
-                  G_SIGNAL_RUN_LAST,
-                  0,
-                  NULL, NULL,
-                  g_cclosure_marshal_VOID__VOID,
-                  G_TYPE_NONE, 0);
-
-  /* FIXME: Need marshaller. */
-  signals[OPEN_DOCUMENTS] =
-    g_signal_new ("open-documents",
-                  GTK_TYPE_MAC_DOCK,
-                  G_SIGNAL_RUN_LAST,
-                  0,
-                  NULL, NULL,
-                  g_cclosure_marshal_VOID__VOID,
-                  G_TYPE_NONE, 0);
-
-  signals[QUIT_ACTIVATE] =
-    g_signal_new ("quit-activate",
-                  GTK_TYPE_MAC_DOCK,
-                  G_SIGNAL_RUN_LAST,
-                  0,
-                  NULL, NULL,
-                  g_cclosure_marshal_VOID__VOID,
-                  G_TYPE_NONE, 0);
-
-  g_type_class_add_private (object_class, sizeof (GtkMacDockPriv));
-
-  /* FIXME: Just testing with triggering Carbon to take control over
-   * the dock menu events instead of Cocoa (which happens when the
-   * sharedApplication is created) to get custom dock menu working
-   * with carbon menu code. However, doing this makes the dock icon
-   * not get a "running triangle".
-   */
-#if 0
-  EventTypeSpec kFakeEventList[] = { { INT_MAX, INT_MAX } };
-  EventRef event;
-
-  ReceiveNextEvent (GetEventTypeCount (kFakeEventList),
-                    kFakeEventList,
-                    kEventDurationNoWait, false,
-                    &event);
-#endif
-}
-
-static void
-gtk_mac_dock_init (GtkMacDock *dock)
-{
-  GtkMacDockPriv *priv = GET_PRIV (dock);
-  static glong    id;
-
-  priv->id = ++id;
-
-  handlers = g_list_prepend (handlers, dock);
-
-  AEInstallEventHandler (kCoreEventClass, kAEQuitApplication,
-                         mac_dock_handle_quit,
-                         priv->id, true);
-  AEInstallEventHandler (kCoreEventClass, kAEOpenApplication,
-                         mac_dock_handle_open_application,
-                         priv->id, true);
-  AEInstallEventHandler (kCoreEventClass, kAEReopenApplication,
-                         mac_dock_handle_reopen_application,
-                         priv->id, true);
-  AEInstallEventHandler (kCoreEventClass, kAEOpenDocuments,
-                         mac_dock_handle_open_documents,
-                         priv->id, true);
-}
-
-static void
-mac_dock_finalize (GObject *object)
-{
-  GtkMacDockPriv *priv;
-
-  priv = GET_PRIV (object);
-
-  AERemoveEventHandler (kCoreEventClass, kAEQuitApplication,
-                        mac_dock_handle_quit, false);
-  AERemoveEventHandler (kCoreEventClass, kAEReopenApplication,
-                        mac_dock_handle_reopen_application, false);
-  AERemoveEventHandler (kCoreEventClass, kAEOpenApplication,
-                        mac_dock_handle_open_application, false);
-  AERemoveEventHandler (kCoreEventClass, kAEOpenDocuments,
-                        mac_dock_handle_open_documents, false);
-
-  handlers = g_list_remove (handlers, object);
-
-  G_OBJECT_CLASS (gtk_mac_dock_parent_class)->finalize (object);
-}
-
-GtkMacDock *
-gtk_mac_dock_new (void)
-{
-  return g_object_new (GTK_TYPE_MAC_DOCK, NULL);
-}
-
-GtkMacDock *
-gtk_mac_dock_get_default (void)
-{
-  if (!global_dock)
-    global_dock = g_object_new (GTK_TYPE_MAC_DOCK, NULL);
-
-  return global_dock;
-}
-
-/* For internal use only. Returns TRUE if there is a handled setup for the
- * Quit dock menu item (i.e. if there is a dock instance alive).
- */
-gboolean
-_gtk_mac_dock_is_quit_menu_item_handled (void)
-{
-  return handlers != NULL;
-}
-
-static GtkMacDock *
-mac_dock_get_from_id (gulong id)
-{
-  GList      *l;
-  GtkMacDock *dock = NULL;
-
-  for (l = handlers; l; l = l->next)
-    {
-      dock = l->data;
-      if (GET_PRIV (dock)->id == id)
-        break;
-
-      dock = NULL;
-    }
-
-  return dock;
-}
-
-static OSErr
-mac_dock_handle_quit (const AppleEvent *inAppleEvent,
-                      AppleEvent       *outAppleEvent,
-                      long              inHandlerRefcon)
-{
-  GtkMacDock *dock;
-
-  dock = mac_dock_get_from_id (inHandlerRefcon);
-
-  if (dock)
-    g_signal_emit (dock, signals[QUIT_ACTIVATE], 0);
-
-  return noErr;
-}
-
-static OSErr
-mac_dock_handle_open_application (const AppleEvent *inAppleEvent,
-                                  AppleEvent       *outAppleEvent,
-                                  long              inHandlerRefCon)
-{
-  /*g_print ("FIXME: mac_dock_handle_open_application\n");*/
-
-  return noErr;
-}
-
-static OSErr
-mac_dock_handle_reopen_application (const AppleEvent *inAppleEvent,
-                                    AppleEvent       *outAppleEvent,
-                                    long              inHandlerRefcon)
-{
-  GtkMacDock *dock;
-
-  dock = mac_dock_get_from_id (inHandlerRefcon);
-
-  if (dock)
-    g_signal_emit (dock, signals[CLICKED], 0);
-
-  return noErr;
-}
-
-static OSErr
-mac_dock_handle_open_documents (const AppleEvent *inAppleEvent,
-                                AppleEvent       *outAppleEvent,
-                                long              inHandlerRefCon)
-{
-  GtkMacDock *dock;
-  OSStatus    status;
-  AEDescList  documents;
-  gchar       path[MAXPATHLEN];
-
-  /*g_print ("FIXME: mac_dock_handle_open_documents\n");*/
-
-  dock = mac_dock_get_from_id (inHandlerRefCon);
-
-  status = AEGetParamDesc (inAppleEvent,
-                           keyDirectObject, typeAEList,
-                           &documents);
-  if (status == noErr)
-    {
-      long count = 0;
-      int  i;
-
-      AECountItems (&documents, &count);
-
-      for (i = 0; i < count; i++)
-        {
-          FSRef ref;
-
-          status = AEGetNthPtr (&documents, i + 1, typeFSRef,
-                                0, 0, &ref, sizeof (ref),
-                                0);
-          if (status != noErr)
-            continue;
-
-          FSRefMakePath (&ref, (unsigned char *) path, MAXPATHLEN);
-
-          /* FIXME: Add to a list, then emit the open-documents
-           * signal.
-           */
-          /*g_print ("  %s\n", path);*/
-        }
-    }
-
-  return status;
-}
-
-void
-gtk_mac_dock_set_icon_from_pixbuf (GtkMacDock *dock,
-                                   GdkPixbuf  *pixbuf)
-{
-  if (!pixbuf)
-    RestoreApplicationDockTileImage ();
-  else
-    {
-      CGImageRef image;
-
-      image = gtkosx_create_cgimage_from_pixbuf (pixbuf);
-      SetApplicationDockTileImage (image);
-      CGImageRelease (image);
-    }
-}
-
-void
-gtk_mac_dock_set_icon_from_resource (GtkMacDock   *dock,
-                                     GtkMacBundle *bundle,
-                                     const gchar  *name,
-                                     const gchar  *type,
-                                     const gchar  *subdir)
-{
-  gchar *path;
-
-  g_return_if_fail (GTK_IS_MAC_DOCK (dock));
-  g_return_if_fail (name != NULL);
-
-  path = gtk_mac_bundle_get_resource_path (bundle, name, type, subdir);
-  if (path)
-    {
-      GdkPixbuf *pixbuf;
-
-      pixbuf = gdk_pixbuf_new_from_file (path, NULL);
-      if (pixbuf)
-        {
-          gtk_mac_dock_set_icon_from_pixbuf (dock, pixbuf);
-          g_object_unref (pixbuf);
-        }
-
-      g_free (path);
-    }
-}
-
-void
-gtk_mac_dock_set_overlay_from_pixbuf (GtkMacDock  *dock,
-                                      GdkPixbuf   *pixbuf)
-{
-  CGImageRef image;
-
-  g_return_if_fail (GTK_IS_MAC_DOCK (dock));
-  g_return_if_fail (pixbuf == NULL || GDK_IS_PIXBUF (pixbuf));
-
-  if (pixbuf)
-    {
-      image = gtkosx_create_cgimage_from_pixbuf (pixbuf);
-      OverlayApplicationDockTileImage (image);
-      CGImageRelease (image);
-    }
-  else
-    RestoreApplicationDockTileImage ();
-}
-
-void
-gtk_mac_dock_set_overlay_from_resource (GtkMacDock   *dock,
-                                        GtkMacBundle *bundle,
-                                        const gchar  *name,
-                                        const gchar  *type,
-                                        const gchar  *subdir)
-{
-  gchar *path;
-
-  g_return_if_fail (GTK_IS_MAC_DOCK (dock));
-  g_return_if_fail (name != NULL);
-
-  path = gtk_mac_bundle_get_resource_path (bundle, name, type, subdir);
-  if (path)
-    {
-      GdkPixbuf *pixbuf;
-
-      pixbuf = gdk_pixbuf_new_from_file (path, NULL);
-      if (pixbuf)
-        {
-          gtk_mac_dock_set_overlay_from_pixbuf (dock, pixbuf);
-          g_object_unref (pixbuf);
-        }
-
-      g_free (path);
-    }
-}
-
-struct _GtkMacAttentionRequest
-{
-  NMRec    nm_request;
-  guint    timeout_id;
-  gboolean is_cancelled;
-};
-
-static gboolean
-mac_dock_attention_cb (GtkMacAttentionRequest *request)
-{
-  request->timeout_id = 0;
-  request->is_cancelled = TRUE;
-
-  NMRemove (&request->nm_request);
-
-  return FALSE;
-}
-
-
-/* FIXME: Add listener for "application activated" and cancel any
- * requests.
- */
-/**
- * gtk_mac_doc_attention_request:
- * @dock: The dock object
- * @type: The attention type flag
- */
-GtkMacAttentionRequest *
-gtk_mac_dock_attention_request (GtkMacDock          *dock,
-                                GtkMacAttentionType  type)
-{
-  GtkMacAttentionRequest *request;
-
-  request = g_new0 (GtkMacAttentionRequest, 1);
-
-  request->nm_request.nmMark = 1;
-  request->nm_request.qType = nmType;
-
-  if (NMInstall (&request->nm_request) != noErr)
-    {
-      g_free (request);
-      return NULL;
-    }
-
-  if (type == GTK_MAC_ATTENTION_INFO)
-    request->timeout_id = gdk_threads_add_timeout (
-                            1000,
-                            (GSourceFunc) mac_dock_attention_cb,
-                            request);
-
-  return request;
-}
-
-/**
- * gtk_mac_dock_attention_cancel:
- * @dock: The dock object
- * @request: The request id we want to cancel.
- */
-void
-gtk_mac_dock_attention_cancel (GtkMacDock             *dock,
-                               GtkMacAttentionRequest *request)
-{
-  if (request->timeout_id)
-    g_source_remove (request->timeout_id);
-
-  if (!request->is_cancelled)
-    NMRemove (&request->nm_request);
-
-  g_free (request);
-}
-
-GType
-gtk_mac_attention_type_get_type (void)
-{
-  /* FIXME */
-  return 0;
-}
-
-#endif // __x86_64__
diff -Naur a/src/gtk-mac-dock.h b/src/gtk-mac-dock.h
--- a/src/gtk-mac-dock.h	2013-09-26 11:32:34.000000000 -0600
+++ b/src/gtk-mac-dock.h	1969-12-31 17:00:00.000000000 -0700
@@ -1,88 +0,0 @@
-/* GTK+ Integration for the Mac OS X Dock.
- *
- * Copyright (C) 2007, 2008 Imendio AB
- *
- * For further information, see:
- * http://sourceforge.net/apps/trac/gtk-osx/wiki/Integrate
- *
- * This library is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 2.1 of the License, or
- * (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#ifndef __GTK_MAC_DOCK_H__
-#define __GTK_MAC_DOCK_H__
-#ifndef __x86_64__
-
-#include <gtk/gtk.h>
-#include <gtk-mac-bundle.h>
-
-G_BEGIN_DECLS
-
-#define GTK_TYPE_MAC_DOCK            (gtk_mac_dock_get_type ())
-#define GTK_MAC_DOCK(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_MAC_DOCK, GtkMacDock))
-#define GTK_MAC_DOCK_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_MAC_DOCK, GtkMacDockClass))
-#define GTK_IS_MAC_DOCK(obj)	     (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_MAC_DOCK))
-#define GTK_IS_MAC_DOCK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MAC_DOCK))
-#define GTK_MAC_DOCK_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_MAC_DOCK, GtkMacDockClass))
-
-typedef struct _GtkMacDock      GtkMacDock;
-typedef struct _GtkMacDockClass GtkMacDockClass;
-
-typedef struct _GtkMacAttentionRequest GtkMacAttentionRequest;
-
-struct _GtkMacDock
-{
-  GObject parent_instance;
-};
-
-struct _GtkMacDockClass
-{
-  GObjectClass parent_class;
-};
-
-typedef enum {
-        GTK_MAC_ATTENTION_CRITICAL,
-        GTK_MAC_ATTENTION_INFO
-} GtkMacAttentionType;
-
-GType                   gtk_mac_dock_get_type                  (void);
-GtkMacDock *            gtk_mac_dock_new                       (void);
-GtkMacDock *            gtk_mac_dock_get_default               (void);
-void                    gtk_mac_dock_set_icon_from_pixbuf      (GtkMacDock             *dock,
-                                                                GdkPixbuf              *pixbuf);
-void                    gtk_mac_dock_set_icon_from_resource    (GtkMacDock             *dock,
-                                                                GtkMacBundle           *bundle,
-                                                                const gchar            *name,
-                                                                const gchar            *type,
-                                                                const gchar            *subdir);
-void                    gtk_mac_dock_set_overlay_from_pixbuf   (GtkMacDock             *dock,
-                                                                GdkPixbuf              *pixbuf);
-void                    gtk_mac_dock_set_overlay_from_resource (GtkMacDock             *dock,
-                                                                GtkMacBundle           *bundle,
-                                                                const gchar            *name,
-                                                                const gchar            *type,
-                                                                const gchar            *subdir);
-GtkMacAttentionRequest *gtk_mac_dock_attention_request         (GtkMacDock             *dock,
-                                                                GtkMacAttentionType     type);
-void                    gtk_mac_dock_attention_cancel          (GtkMacDock             *dock,
-                                                                GtkMacAttentionRequest *request);
-
-#define GTK_TYPE_MAC_ATTENTION_TYPE (gtk_mac_attention_type_get_type())
-GType                   gtk_mac_attention_type_get_type        (void);
-
-G_END_DECLS
-
-#endif /* __x86_64__ */
-#endif /* __GTK_MAC_DOCK_H__ */
diff -Naur a/src/gtk-mac-integration.h b/src/gtk-mac-integration.h
--- a/src/gtk-mac-integration.h	2013-09-26 11:32:34.000000000 -0600
+++ b/src/gtk-mac-integration.h	1969-12-31 17:00:00.000000000 -0700
@@ -1,30 +0,0 @@
-/* GTK+ Integration for Mac OS X.
- *
- * Copyright (C) 2007, 2008 Imendio AB
- *
- * For further information, see:
- * http://sourceforge.net/apps/trac/gtk-osx/wiki/Integrate
- *
- * This library is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 2.1 of the License, or
- * (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#ifndef __GTK_MAC_INTEGRATION_H__
-#define __GTK_MAC_INTEGRATION_H__
-
-#include <gtk-mac-menu.h>
-#include <gtk-mac-dock.h>
-
-#endif /* __GTK_MAC_INTEGRATION_H__ */
diff -Naur a/src/gtk-mac-menu.c b/src/gtk-mac-menu.c
--- a/src/gtk-mac-menu.c	2014-02-02 15:44:27.000000000 -0700
+++ b/src/gtk-mac-menu.c	1969-12-31 17:00:00.000000000 -0700
@@ -1,1372 +0,0 @@
-/* GTK+ Integration for the Mac OS X Menubar.
- *
- * Copyright (C) 2007 Pioneer Research Center USA, Inc.
- * Copyright (C) 2007, 2008 Imendio AB
- * Copyright © 2009, 2010 John Ralls
- *
- * For further information, see:
- * http://sourceforge.net/apps/trac/gtk-osx/wiki/Integrate
- *
- * This library is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 2.1 of the License, or
- * (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#ifndef __x86_64__
-#include "config.h"
-
-#include <gtk/gtk.h>
-#include <gdk/gdkkeysyms.h>
-#include <gdk/gdkquartz.h>
-#include <Carbon/Carbon.h>
-#import <Cocoa/Cocoa.h>
-
-#include "gtk-mac-menu.h"
-#include "gtk-mac-private.h"
-
-/* TODO
- *
- * - Adding a standard Window menu (Minimize etc)?
- * - Sync reordering items? Does that work now?
- * - Create on demand? (can this be done with gtk+? ie fill in menu
-     items when the menu is opened)
- *
- * - Deleting a menu item that is not the last one in a menu doesn't work
- */
-
-#define GTK_QUARTZ_MENU_CREATOR 'GTKC'
-#define GTK_QUARTZ_ITEM_WIDGET  'IWID'
-
-#define GTK_MAC_KEY_HANDLER     "gtk-mac-key-handler"
-
-#define DEBUG FALSE
-#define DEBUG_SET FALSE
-#define DEBUG_SYNC FALSE
-#define DEBUG_SIGNAL FALSE
-#define DEBUG_CARBON FALSE
-
-static MenuID   last_menu_id;
-static gboolean global_key_handler_enabled = TRUE;
-
-static void   sync_menu_shell (GtkMenuShell *menu_shell, MenuRef carbon_menu,
-                               gboolean toplevel, gboolean debug);
-
-/* A category that exposes the protected carbon event for an NSEvent. */
-@interface NSEvent (GdkQuartzNSEvent)
-- (void *)gdk_quartz_event_ref;
-@end
-
-@implementation NSEvent (GdkQuartzNSEvent)
-- (void *)gdk_quartz_event_ref
-{
-  return _eventRef;
-}
-@end
-
-static gboolean
-menu_flash_off_cb (gpointer data)
-{
-  /* Disable flash by flashing a non-existing menu id. */
-  FlashMenuBar (last_menu_id + 1);
-  return FALSE;
-}
-
-/*
- * utility functions
- */
-
-static GtkWidget *
-find_menu_label (GtkWidget *widget)
-{
-  GtkWidget *label = NULL;
-  if (GTK_IS_LABEL (widget))
-    return widget;
-  if (GTK_IS_CONTAINER (widget))
-    {
-      GList *children;
-      GList *l;
-      children = gtk_container_get_children (GTK_CONTAINER (widget));
-      for (l = children; l; l = l->next)
-        {
-          label = find_menu_label (l->data);
-          if (label)
-            break;
-        }
-      g_list_free (children);
-    }
-  return label;
-}
-
-static const gchar *
-get_menu_label_text (GtkWidget  *menu_item, GtkWidget **label)
-{
-  GtkWidget *my_label;
-  my_label = find_menu_label (menu_item);
-  if (label)
-    *label = my_label;
-  if (my_label)
-    return gtk_label_get_text (GTK_LABEL (my_label));
-  return NULL;
-}
-
-static gboolean
-accel_find_func (GtkAccelKey *key, GClosure *closure, gpointer data)
-{
-  return (GClosure *) data == closure;
-}
-
-static GClosure *
-_gtk_accel_label_get_closure (GtkAccelLabel *label)
-{
-  g_return_val_if_fail (GTK_IS_ACCEL_LABEL (label), NULL);
-
-  GClosure *closure = NULL;
-  g_object_get (G_OBJECT (label), "accel-closure", &closure, NULL);
-  return closure;
-}
-
-/*
- * CarbonMenu functions
- *
- * A CarbonMenu contains a reference to the OSX menu; connect attaches
- * it to the GtkMenu so that sync_menu will know which OSX menu to
- * synchronise as it recurses through the GtkMenu tree. There is no
- * back-pointer from the OSX Menu to the GtkMenu. Note that Gtk
- * doesn't have an "App" menu (the one named after the application),
- * so no MenuRef points to it.
- */
-
-typedef struct
-{
-  MenuRef menu;
-  guint   toplevel : 1;
-} CarbonMenu;
-
-static GQuark carbon_menu_quark = 0;
-
-static CarbonMenu *
-carbon_menu_new (void)
-{
-  return g_slice_new0 (CarbonMenu);
-}
-
-static void
-carbon_menu_free (CarbonMenu *menu)
-{
-  DisposeMenu (menu->menu);
-  g_slice_free (CarbonMenu, menu);
-}
-
-static CarbonMenu *
-carbon_menu_get (GtkWidget *widget)
-{
-  return g_object_get_qdata (G_OBJECT (widget), carbon_menu_quark);
-}
-
-static void
-carbon_menu_connect (GtkWidget *menu, MenuRef menuRef, gboolean toplevel)
-{
-  CarbonMenu *carbon_menu = carbon_menu_get (menu);
-  if (!carbon_menu)
-    {
-      carbon_menu = carbon_menu_new ();
-      g_object_set_qdata_full (G_OBJECT (menu), carbon_menu_quark,
-                               carbon_menu,
-                               (GDestroyNotify) carbon_menu_free);
-    }
-  carbon_menu->menu     = menuRef;
-  carbon_menu->toplevel = toplevel;
-}
-
-
-/*
- * CarbonMenuItem functions
- *
- * Like CarbonMenu, the CarbonMenuItem contains a reference to the OSX
- * Menu which contains it and the index the menu item in that menu
- * (there aren't pointers directly to menu items in Carbon like there
- * are in Cocoa). If the item has a submenu, there's a reference for
- * that object as well, and there's a pointer to the accelerator for
- * connecting signals from. This structure is inserted into the
- * GtkMenuItem, and pointer to the GtkMenuItem is attached to the OSX
- * Menu at the indicated index. Much effort goes into ensuring that
- * the indices stay synchronized, as interesting behavior will result
- * if they get out of sync.
- */
-
-typedef struct
-{
-  MenuRef        menu;
-  MenuItemIndex  index;
-  MenuRef        submenu;
-  GClosure      *accel_closure;
-} CarbonMenuItem;
-
-static GQuark carbon_menu_item_quark = 0;
-
-static CarbonMenuItem *
-carbon_menu_item_new (void)
-{
-  return g_slice_new0 (CarbonMenuItem);
-}
-
-static void
-carbon_menu_item_free (CarbonMenuItem *menu_item)
-{
-  DeleteMenuItem (menu_item->menu, menu_item->index); //Clean up the Carbon Menu
-  if (menu_item->accel_closure)
-    g_closure_unref (menu_item->accel_closure);
-  g_slice_free (CarbonMenuItem, menu_item);
-}
-
-static const gchar *
-carbon_menu_error_string (OSStatus err)
-{
-  switch (err)
-    {
-    case 0:
-      return "No Error";
-    case -50:
-      return "User Parameter List";
-    case -5603:
-      return "Menu Property Reserved Creator Type";
-    case -5604:
-      return "Menu Property Not Found";
-    case -5620:
-      return "Menu Not Found";
-    case -5621:
-      return "Menu uses system definition";
-    case -5622:
-      return "Menu Item Not Found";
-    case -5623:
-      return "Menu Reference Invalid";
-    case -9860:
-      return "Event Already Posted";
-    case -9861:
-      return "Event Target Busy";
-    case -9862:
-      return "Invalid Event Class";
-    case -9864:
-      return "Incorrect Event Class";
-    case -9866:
-      return "Event Handler Already Installed";
-    case -9868:
-      return "Internal Event Error";
-    case -9869:
-      return "Incorrect Event Kind";
-    case -9870:
-      return "Event Parameter Not Found";
-    case -9874:
-      return "Event Not Handled";
-    case -9875:
-      return "Event Loop Timeout";
-    case -9876:
-      return "Event Loop Quit";
-    case -9877:
-      return  "Event Not In Queue";
-    case -9878:
-      return "Hot Key Exists";
-    case -9879:
-      return "Invalid Hot Key";
-    default:
-      return "Invalid Error Code";
-    }
-  return "System Error: Unreachable";
-}
-
-#define carbon_menu_warn(err, msg) \
-    if (err && DEBUG_CARBON) \
-	g_printerr("%s: %s %s\n", G_STRFUNC, msg, carbon_menu_error_string(err));
-
-#define carbon_menu_warn_label(err, label, msg) \
-    if (err && DEBUG_CARBON) \
-	g_printerr("%s: %s %s %s\n", G_STRFUNC, label, msg, carbon_menu_error_string(err));
-
-#define carbon_menu_err_return(err, msg) \
-    if (err) { \
-    	if (DEBUG_CARBON) \
-	    g_printerr("%s: %s %s\n", G_STRFUNC, msg, carbon_menu_error_string(err)); \
-	return;\
-    }
-
-#define carbon_menu_err_return_val(err, msg, val) \
-    if (err) { \
-    	if (DEBUG_CARBON) \
-	    g_printerr("%s: %s %s\n", G_STRFUNC, msg, carbon_menu_error_string(err)); \
-	return val;\
-    }
-
-#define carbon_menu_err_return_label(err, label, msg)	\
-    if (err) { \
-    	if (DEBUG_CARBON) \
-	    g_printerr("%s: %s %s %s\n", G_STRFUNC, label, msg, carbon_menu_error_string(err)); \
-	return;\
-    }
-
-#define carbon_menu_err_return_label_val(err, label, msg, val)	\
-    if (err) { \
-    	if (DEBUG_CARBON) \
-	    g_printerr("%s: %s %s %s\n", G_STRFUNC, label, msg, carbon_menu_error_string(err)); \
-	return val;\
-    }
-
-static CarbonMenuItem *
-carbon_menu_item_get (GtkWidget *widget)
-{
-  return g_object_get_qdata (G_OBJECT (widget), carbon_menu_item_quark);
-}
-
-static CarbonMenuItem *
-carbon_menu_item_get_checked (GtkWidget *widget)
-{
-  CarbonMenuItem * carbon_item = carbon_menu_item_get (widget);
-  GtkWidget *checkWidget = NULL;
-  OSStatus  err;
-  const gchar *label = get_menu_label_text (GTK_WIDGET (widget), NULL);
-  const gchar *name = gtk_widget_get_name (widget);
-
-  if (!carbon_item)
-    return NULL;
-
-  /* Get any GtkWidget associated with the item. */
-  err = GetMenuItemProperty (carbon_item->menu, carbon_item->index,
-                             GTK_QUARTZ_MENU_CREATOR,
-                             GTK_QUARTZ_ITEM_WIDGET,
-                             sizeof (checkWidget), 0, &checkWidget);
-  if (err)
-    {
-      if (DEBUG_CARBON)
-        g_printerr ("%s: Widget %s %s Cross-check error %s\n", G_STRFUNC,
-                    name, label, carbon_menu_error_string (err));
-      return NULL;
-    }
-  /* This could check the checkWidget, but that could turn into a
-   * recursion nightmare, so worry about it when it we run
-   * carbon_menu_item_get on it.
-   */
-  if (widget != checkWidget)
-    {
-      const gchar *clabel = get_menu_label_text (GTK_WIDGET (checkWidget),
-                            NULL);
-      const gchar *cname = gtk_widget_get_name (checkWidget);
-      if (DEBUG_CARBON)
-        g_printerr ("%s: Widget mismatch, expected %s %s got %s %s\n",
-                    G_STRFUNC, name, label, cname, clabel);
-      return NULL;
-    }
-  return carbon_item;
-}
-
-static void
-carbon_menu_item_update_state (CarbonMenuItem *carbon_item, GtkWidget *widget)
-{
-  gboolean sensitive;
-  gboolean visible;
-  UInt32   set_attrs = 0;
-  UInt32   clear_attrs = 0;
-  OSStatus err;
-
-  g_object_get (widget, "sensitive", &sensitive, "visible",   &visible, NULL);
-  if (!sensitive)
-    set_attrs |= kMenuItemAttrDisabled;
-  else
-    clear_attrs |= kMenuItemAttrDisabled;
-  if (!visible)
-    set_attrs |= kMenuItemAttrHidden;
-  else
-    clear_attrs |= kMenuItemAttrHidden;
-  err = ChangeMenuItemAttributes (carbon_item->menu, carbon_item->index,
-                                  set_attrs, clear_attrs);
-  if (!err && carbon_item->submenu)
-    err = ChangeMenuAttributes (carbon_item->submenu,
-                                set_attrs, clear_attrs);
-  carbon_menu_warn (err, "Failed to update state");
-}
-
-static void
-carbon_menu_item_update_active (CarbonMenuItem *carbon_item,
-                                GtkWidget *widget)
-{
-  gboolean active;
-  g_object_get (widget, "active", &active, NULL);
-  CheckMenuItem (carbon_item->menu, carbon_item->index, active);
-}
-
-static void
-carbon_menu_item_update_submenu (CarbonMenuItem *carbon_item,
-                                 GtkWidget *widget, bool debug)
-{
-  GtkWidget *submenu;
-  const gchar *label_text;
-  CFStringRef  cfstr = NULL;
-  OSStatus err;
-
-  label_text = get_menu_label_text (widget, NULL);
-  submenu = gtk_menu_item_get_submenu (GTK_MENU_ITEM (widget));
-  if (!submenu)
-    {
-      err = SetMenuItemHierarchicalMenu (carbon_item->menu,
-                                         carbon_item->index, NULL);
-      carbon_menu_warn_label (err, label_text, "Failed to clear submenu");
-      carbon_item->submenu = NULL;
-      return;
-    }
-  err = CreateNewMenu (++last_menu_id, 0, &carbon_item->submenu);
-  carbon_menu_err_return_label (err, label_text, "Failed to create new menu");
-  if (label_text)
-    cfstr = CFStringCreateWithCString (NULL, label_text,
-                                       kCFStringEncodingUTF8);
-
-  err = SetMenuTitleWithCFString (carbon_item->submenu, cfstr);
-  if (cfstr)
-    CFRelease (cfstr);
-  carbon_menu_err_return_label (err, label_text, "Failed to set menu title");
-  err = SetMenuItemHierarchicalMenu (carbon_item->menu, carbon_item->index,
-                                     carbon_item->submenu);
-  carbon_menu_err_return_label (err, label_text, "Failed to set menu");
-  sync_menu_shell (GTK_MENU_SHELL (submenu), carbon_item->submenu,
-                   FALSE, debug);
-}
-
-static void
-carbon_menu_item_update_label (CarbonMenuItem *carbon_item, GtkWidget *widget)
-{
-  const gchar *label_text;
-  CFStringRef  cfstr = NULL;
-  OSStatus err;
-
-  label_text = get_menu_label_text (widget, NULL);
-  if (label_text)
-    cfstr = CFStringCreateWithCString (NULL, label_text,
-                                       kCFStringEncodingUTF8);
-  err = SetMenuItemTextWithCFString (carbon_item->menu, carbon_item->index,
-                                     cfstr);
-  carbon_menu_warn (err, "Failed to set menu text");
-  if (cfstr)
-    CFRelease (cfstr);
-}
-
-static void
-carbon_menu_item_update_accelerator (CarbonMenuItem *carbon_item,
-                                     GtkWidget *widget)
-{
-  GtkAccelKey *key;
-  GtkWidget *label;
-  GdkDisplay *display = NULL;
-  GdkKeymap *keymap = NULL;
-  GdkKeymapKey *keys = NULL;
-  gint n_keys = 0;
-  UInt8 modifiers = 0;
-  OSStatus err;
-
-  const gchar *label_txt = get_menu_label_text (widget, &label);
-  if (! (GTK_IS_ACCEL_LABEL (label)
-         && _gtk_accel_label_get_closure (GTK_ACCEL_LABEL (label))))
-    {
-// Clear the menu shortcut
-      err = SetMenuItemModifiers (carbon_item->menu, carbon_item->index,
-                                  kMenuNoModifiers | kMenuNoCommandModifier);
-      carbon_menu_warn_label (err, label_txt, "Failed to set modifiers");
-      err = ChangeMenuItemAttributes (carbon_item->menu, carbon_item->index,
-                                      0, kMenuItemAttrUseVirtualKey);
-      carbon_menu_warn_label (err, label_txt, "Failed to change attributes");
-      err = SetMenuItemCommandKey (carbon_item->menu, carbon_item->index,
-                                   false, 0);
-      carbon_menu_warn_label (err, label_txt, "Failed to clear command key");
-      return;
-    }
-  GClosure *closure = _gtk_accel_label_get_closure (GTK_ACCEL_LABEL (label));
-  key = gtk_accel_group_find (gtk_accel_group_from_accel_closure (closure),
-                              accel_find_func,
-                              closure);
-  if (! (key && key->accel_key && key->accel_flags & GTK_ACCEL_VISIBLE))
-    return;
-  display = gtk_widget_get_display (widget);
-  keymap  = gdk_keymap_get_for_display (display);
-
-  if (!gdk_keymap_get_entries_for_keyval (keymap, key->accel_key,
-                                          &keys, &n_keys))
-    return;
-
-  err = SetMenuItemCommandKey (carbon_item->menu, carbon_item->index,
-                               true, keys[0].keycode);
-  carbon_menu_warn_label (err, label_txt, "Set Command Key Failed");
-  g_free (keys);
-  if (key->accel_mods)
-    {
-      if (key->accel_mods & GDK_SHIFT_MASK)
-        modifiers |= kMenuShiftModifier;
-      if (key->accel_mods & GDK_MOD1_MASK)
-        modifiers |= kMenuOptionModifier;
-    }
-  if (! (key->accel_mods & GDK_CONTROL_MASK))
-    {
-      modifiers |= kMenuNoCommandModifier;
-    }
-  err = SetMenuItemModifiers (carbon_item->menu, carbon_item->index,
-                              modifiers);
-  carbon_menu_warn_label (err, label_txt, "Set Item Modifiers Failed");
-  return;
-}
-
-static void
-carbon_menu_item_accel_changed (GtkAccelGroup *accel_group, guint keyval,
-                                GdkModifierType  modifier,
-                                GClosure *accel_closure, GtkWidget *widget)
-{
-  CarbonMenuItem *carbon_item = carbon_menu_item_get (widget);
-  GtkWidget      *label;
-
-  const gchar *label_text = get_menu_label_text (widget, &label);
-  if (!carbon_item)
-    {
-      if (DEBUG_CARBON)
-        g_printerr ("%s: Bad carbon item for %s\n", G_STRFUNC, label_text);
-      return;
-    }
-  if (gtk_accel_group_from_accel_closure (accel_closure) != accel_group)
-    return;
-  if (GTK_IS_ACCEL_LABEL (label) &&
-      _gtk_accel_label_get_closure (GTK_ACCEL_LABEL (label)) == accel_closure)
-    carbon_menu_item_update_accelerator (carbon_item, widget);
-}
-
-static void
-carbon_menu_item_update_accel_closure (CarbonMenuItem *carbon_item,
-                                       GtkWidget *widget)
-{
-  GtkAccelGroup *group;
-  GtkWidget     *label;
-  get_menu_label_text (widget, &label);
-  if (carbon_item->accel_closure)
-    {
-      group = gtk_accel_group_from_accel_closure (carbon_item->accel_closure);
-      g_signal_handlers_disconnect_by_func (group,
-                                            carbon_menu_item_accel_changed,
-                                            widget);
-      g_closure_unref (carbon_item->accel_closure);
-      carbon_item->accel_closure = NULL;
-    }
-  if (GTK_IS_ACCEL_LABEL (label))
-    carbon_item->accel_closure = _gtk_accel_label_get_closure (GTK_ACCEL_LABEL (label));
-  if (carbon_item->accel_closure)
-    {
-      g_closure_ref (carbon_item->accel_closure);
-      group = gtk_accel_group_from_accel_closure (carbon_item->accel_closure);
-      g_signal_connect_object (group, "accel-changed",
-                               G_CALLBACK (carbon_menu_item_accel_changed),
-                               widget, 0);
-    }
-  carbon_menu_item_update_accelerator (carbon_item, widget);
-}
-
-static void
-carbon_menu_item_notify (GObject *object, GParamSpec *pspec,
-                         CarbonMenuItem *carbon_item)
-{
-  if (!strcmp (pspec->name, "sensitive") ||
-      !strcmp (pspec->name, "visible"))
-    {
-      carbon_menu_item_update_state (carbon_item, GTK_WIDGET (object));
-    }
-  else if (!strcmp (pspec->name, "active"))
-    {
-      carbon_menu_item_update_active (carbon_item, GTK_WIDGET (object));
-    }
-  else if (!strcmp (pspec->name, "submenu"))
-    {
-      carbon_menu_item_update_submenu (carbon_item, GTK_WIDGET (object),
-                                       DEBUG_SIGNAL);
-    }
-  else if (DEBUG)
-    g_printerr ("%s: Invalid parameter specification %s\n", G_STRFUNC,
-                pspec->name);
-}
-
-static void
-carbon_menu_item_notify_label (GObject *object, GParamSpec *pspec,
-                               gpointer data)
-{
-  CarbonMenuItem *carbon_item =
-    carbon_menu_item_get_checked (GTK_WIDGET (object));
-  const gchar *label_text = get_menu_label_text (GTK_WIDGET (object), NULL);
-
-  if (!carbon_item)
-    {
-      if (DEBUG_CARBON)
-        g_printerr ("%s: Bad carbon item for %s\n", G_STRFUNC, label_text);
-      return;
-    }
-  if (!strcmp (pspec->name, "label"))
-    {
-      carbon_menu_item_update_label (carbon_item, GTK_WIDGET (object));
-    }
-  else if (!strcmp (pspec->name, "accel-closure"))
-    {
-      carbon_menu_item_update_accel_closure (carbon_item,
-                                             GTK_WIDGET (object));
-    }
-}
-
-static CarbonMenuItem *
-carbon_menu_item_connect (GtkWidget *menu_item, GtkWidget *label,
-                          MenuRef menu, MenuItemIndex index)
-{
-  CarbonMenuItem *carbon_item =
-    carbon_menu_item_get_checked (menu_item);
-
-  if (!carbon_item)
-    {
-      carbon_item = carbon_menu_item_new ();
-      g_object_set_qdata_full (G_OBJECT (menu_item), carbon_menu_item_quark,
-                               carbon_item,
-                               (GDestroyNotify) carbon_menu_item_free);
-      g_signal_connect (menu_item, "notify",
-                        G_CALLBACK (carbon_menu_item_notify), carbon_item);
-      if (label)
-        g_signal_connect_swapped (label, "notify::label",
-                                  G_CALLBACK (carbon_menu_item_notify_label),
-                                  menu_item);
-    }
-  carbon_item->menu  = menu;
-  carbon_item->index = index;
-  return carbon_item;
-}
-
-static CarbonMenuItem *
-carbon_menu_item_create (GtkWidget *menu_item, MenuRef carbon_menu,
-                         MenuItemIndex index, bool debug)
-{
-  GtkWidget          *label      = NULL;
-  const gchar        *label_text;
-  CFStringRef         cfstr      = NULL;
-  MenuItemAttributes  attributes = 0;
-  CarbonMenuItem *carbon_item;
-  OSStatus err;
-
-  label_text = get_menu_label_text (menu_item, &label);
-  if (debug)
-    g_printerr ("%s:   -> creating new %s\n", G_STRFUNC, label_text);
-  if (label_text)
-    cfstr = CFStringCreateWithCString (NULL, label_text,
-                                       kCFStringEncodingUTF8);
-  if (GTK_IS_SEPARATOR_MENU_ITEM (menu_item))
-    attributes |= kMenuItemAttrSeparator;
-  if (!gtk_widget_get_sensitive (menu_item))
-    attributes |= kMenuItemAttrDisabled;
-  if (!gtk_widget_get_visible (menu_item))
-    attributes |= kMenuItemAttrHidden;
-  err = InsertMenuItemTextWithCFString (carbon_menu, cfstr, index - 1,
-                                        attributes, 0);
-  carbon_menu_err_return_label_val (err, label_text,
-                                    "Failed to insert menu item", NULL);
-  err = SetMenuItemProperty (carbon_menu, index,
-                             GTK_QUARTZ_MENU_CREATOR,
-                             GTK_QUARTZ_ITEM_WIDGET,
-                             sizeof (menu_item), &menu_item);
-
-  if (cfstr)
-    CFRelease (cfstr);
-  if (err)
-    {
-      carbon_menu_warn_label (err, label_text,
-                              "Failed to set menu property");
-      DeleteMenuItem (carbon_menu, index); //Clean up the extra menu item
-      return NULL;
-    }
-  carbon_item = carbon_menu_item_connect (menu_item, label,
-                                          carbon_menu,
-                                          index);
-  if (!carbon_item)   //Got a bad carbon_item, bail out
-    {
-      DeleteMenuItem (carbon_menu, index); //Clean up the extra menu item
-      return carbon_item;
-    }
-  return carbon_item;
-}
-
-
-typedef struct
-{
-  GtkWidget *widget;
-} ActivateIdleData;
-
-static void
-activate_destroy_cb (gpointer user_data)
-{
-  ActivateIdleData *data = user_data;
-
-  if (data->widget)
-    g_object_remove_weak_pointer (G_OBJECT (data->widget),
-                                  (gpointer) &data->widget);
-  g_free (data);
-}
-
-static gboolean
-activate_idle_cb (gpointer user_data)
-{
-  ActivateIdleData *data = user_data;
-
-  if (data->widget)
-    gtk_menu_item_activate (GTK_MENU_ITEM (data->widget));
-  return FALSE;
-}
-
-/*
- * carbon event handler
- */
-
-static OSStatus
-menu_event_handler_func (EventHandlerCallRef  event_handler_call_ref,
-                         EventRef event_ref, void *data)
-{
-  UInt32 event_class = GetEventClass (event_ref);
-  UInt32 event_kind = GetEventKind (event_ref);
-  HICommand command;
-  OSStatus  err;
-  GtkWidget *widget = NULL;
-  ActivateIdleData *idleData;
-
-  switch (event_class)
-    {
-    case kEventClassCommand:
-      /* This is called when activating (is that the right GTK+ term?)
-       * a menu item.
-       */
-      if (event_kind != kEventCommandProcess)
-        break;
-
-#if DEBUG
-      g_printerr ("Menu: kEventClassCommand/kEventCommandProcess\n");
-#endif
-      err = GetEventParameter (event_ref, kEventParamDirectObject,
-                               typeHICommand, 0,
-                               sizeof (command), 0, &command);
-      if (err != noErr)
-        {
-          carbon_menu_warn (err, "Get Event Returned Error");
-          break;
-        }
-      /* Get any GtkWidget associated with the item. */
-      err = GetMenuItemProperty (command.menu.menuRef,
-                                 command.menu.menuItemIndex,
-                                 GTK_QUARTZ_MENU_CREATOR,
-                                 GTK_QUARTZ_ITEM_WIDGET,
-                                 sizeof (widget), 0, &widget);
-      if (err != noErr)
-        {
-          carbon_menu_warn (err, "Failed to retrieve the widget associated with the menu item");
-          break;
-        }
-      if (! GTK_IS_WIDGET (widget))
-        {
-          g_printerr ("The item associated with the menu item isn't a widget\n");
-          break;
-        }
-      /* Activate from an idle handler so that the event is
-       * emitted from the main loop instead of in the middle of
-       * handling quartz events.
-       */
-      idleData = g_new0 (ActivateIdleData, 1);
-      idleData->widget = widget;
-      g_object_add_weak_pointer (G_OBJECT (widget),
-                                 (gpointer) &idleData->widget);
-      g_idle_add_full (G_PRIORITY_HIGH, activate_idle_cb,
-                       idleData, activate_destroy_cb);
-      return noErr;
-      break;
-    case kEventClassMenu:
-      if (event_kind == kEventMenuEndTracking)
-        g_idle_add (menu_flash_off_cb, NULL);
-      break;
-    default:
-      break;
-    }
-  return eventNotHandledErr;
-}
-
-static gboolean
-nsevent_handle_menu_key (NSEvent *nsevent)
-{
-  EventRef      event_ref;
-  MenuRef       menu_ref;
-  MenuItemIndex index;
-  MenuCommand menu_command;
-  HICommand   hi_command;
-  OSStatus err;
-
-  if ([nsevent type] != NSKeyDown)
-    return FALSE;
-  event_ref = [nsevent gdk_quartz_event_ref];
-  if (!IsMenuKeyEvent (NULL, event_ref, kMenuEventQueryOnly,
-                       &menu_ref, &index))
-    return FALSE;
-  err = GetMenuItemCommandID (menu_ref, index, &menu_command);
-  carbon_menu_err_return_val (err, "Failed to get command id", FALSE);
-  hi_command.commandID = menu_command;
-  hi_command.menu.menuRef = menu_ref;
-  hi_command.menu.menuItemIndex = index;
-  err = CreateEvent (NULL, kEventClassCommand, kEventCommandProcess,
-                     0, kEventAttributeUserEvent, &event_ref);
-  carbon_menu_err_return_val (err, "Failed to create event", FALSE);
-  err = SetEventParameter (event_ref, kEventParamDirectObject, typeHICommand,
-                           sizeof (HICommand), &hi_command);
-  if (err != noErr)
-    ReleaseEvent (event_ref); //We're about to bail, don't want to leak
-  carbon_menu_err_return_val (err, "Failed to set event parm", FALSE);
-  FlashMenuBar (GetMenuID (menu_ref));
-  g_timeout_add (30, menu_flash_off_cb, NULL);
-  err = SendEventToEventTarget (event_ref, GetMenuEventTarget (menu_ref));
-  ReleaseEvent (event_ref);
-  carbon_menu_err_return_val (err, "Failed to send event", FALSE);
-  return TRUE;
-}
-
-gboolean
-gtk_mac_menu_handle_menu_event (GdkEventKey *event)
-{
-  NSEvent *nsevent;
-
-  /* FIXME: If the event here is unallocated, we crash. */
-  nsevent = gdk_quartz_event_get_nsevent ((GdkEvent *) event);
-  if (nsevent)
-    return nsevent_handle_menu_key (nsevent);
-  return FALSE;
-}
-
-static GdkFilterReturn
-global_event_filter_func (gpointer  windowing_event, GdkEvent *event,
-                          gpointer  user_data)
-{
-  NSEvent *nsevent = windowing_event;
-
-  /* Handle menu events with no window, since they won't go through the
-   * regular event processing.
-   */
-  if ([nsevent window] == nil)
-    {
-      if (nsevent_handle_menu_key (nsevent))
-        return GDK_FILTER_REMOVE;
-    }
-  else if (global_key_handler_enabled && [nsevent type] == NSKeyDown)
-    {
-      GList *toplevels, *l;
-      GtkWindow *focus = NULL;
-
-      toplevels = gtk_window_list_toplevels ();
-      for (l = toplevels; l; l = l->next)
-        {
-          if (gtk_window_has_toplevel_focus (l->data))
-            {
-              focus = l->data;
-              break;
-            }
-        }
-      g_list_free (toplevels);
-
-      /* FIXME: We could do something to skip menu events if there is a
-       * modal dialog...
-       */
-      if (!focus
-          || !g_object_get_data (G_OBJECT (focus), GTK_MAC_KEY_HANDLER))
-        {
-          if (nsevent_handle_menu_key (nsevent))
-            return GDK_FILTER_REMOVE;
-        }
-    }
-  return GDK_FILTER_CONTINUE;
-}
-
-static gboolean
-key_press_event (GtkWidget   *widget, GdkEventKey *event, gpointer user_data)
-{
-  GtkWindow *window = GTK_WINDOW (widget);
-  GtkWidget *focus = gtk_window_get_focus (window);
-  gboolean handled = FALSE;
-
-  /* Text widgets get all key events first. */
-  if (GTK_IS_EDITABLE (focus) || GTK_IS_TEXT_VIEW (focus))
-    handled = gtk_window_propagate_key_event (window, event);
-
-  if (!handled)
-    handled = gtk_mac_menu_handle_menu_event (event);
-
-  /* Invoke control/alt accelerators. */
-  if (!handled && event->state & (GDK_CONTROL_MASK | GDK_MOD1_MASK))
-    handled = gtk_window_activate_key (window, event);
-
-  /* Invoke focus widget handlers. */
-  if (!handled)
-    handled = gtk_window_propagate_key_event (window, event);
-
-  /* Invoke non-(control/alt) accelerators. */
-  if (!handled && ! (event->state & (GDK_CONTROL_MASK | GDK_MOD1_MASK)))
-    handled = gtk_window_activate_key (window, event);
-
-  return handled;
-}
-
-static void
-setup_menu_event_handler (void)
-{
-  static gboolean is_setup = FALSE;
-
-  EventHandlerUPP menu_event_handler_upp;
-  EventHandlerRef menu_event_handler_ref;
-  OSStatus err;
-  const EventTypeSpec menu_events[] =
-  {
-    { kEventClassCommand, kEventCommandProcess },
-    { kEventClassMenu, kEventMenuEndTracking }
-  };
-
-  if (is_setup)
-    return;
-  gdk_window_add_filter (NULL, global_event_filter_func, NULL);
-  menu_event_handler_upp = NewEventHandlerUPP (menu_event_handler_func);
-  err = InstallEventHandler (GetApplicationEventTarget (),
-                             menu_event_handler_upp,
-                             GetEventTypeCount (menu_events), menu_events, 0,
-                             &menu_event_handler_ref);
-  carbon_menu_err_return (err, "Failed to install event handler");
-#if 0
-  /* Note: If we want to supporting shutting down, remove the handler
-   * with:
-   */
-  err = RemoveEventHandler (menu_event_handler_ref);
-  carbon_menu_warn (err, "Failed to remove handler");
-  err = DisposeEventHandlerUPP (menu_event_handler_upp);
-  carbon_menu_warn (err, "Failed to elete menu handler UPP");
-#endif
-  is_setup = TRUE;
-}
-
-static void
-sync_menu_shell (GtkMenuShell *menu_shell, MenuRef carbon_menu,
-                 gboolean toplevel, gboolean debug)
-{
-  GList         *children;
-  GList         *l;
-  MenuItemIndex  carbon_index = 1;
-  OSStatus err;
-
-  if (debug)
-    g_printerr ("%s: syncing shell %s (%p)\n", G_STRFUNC,
-                get_menu_label_text (GTK_WIDGET (menu_shell), NULL),
-                menu_shell);
-  carbon_menu_connect (GTK_WIDGET (menu_shell), carbon_menu, toplevel);
-  children = gtk_container_get_children (GTK_CONTAINER (menu_shell));
-  for (l = children; l; l = l->next)
-    {
-      GtkWidget      *menu_item = l->data;
-      CarbonMenuItem *carbon_item;
-      MenuAttributes attrs;
-      const gchar *label = get_menu_label_text (menu_item, NULL);
-
-#if ! GTK_CHECK_VERSION (3, 10, 0)
-      if (GTK_IS_TEAROFF_MENU_ITEM (menu_item))
-        continue;
-#endif
-      if (toplevel && (g_object_get_data (G_OBJECT (menu_item),
-                                          "gtk-empty-menu-item")
-                       || GTK_IS_SEPARATOR_MENU_ITEM (menu_item)))
-        continue;
-      carbon_item = carbon_menu_item_get (menu_item);
-      if (debug)
-        g_printerr ("%s: carbon_item %d for menu_item %d (%s, %s)\n",
-                    G_STRFUNC, carbon_item ? carbon_item->index : -1,
-                    carbon_index, label,
-                    g_type_name (G_TYPE_FROM_INSTANCE (menu_item)));
-
-      if (carbon_item && carbon_item->index != carbon_index)
-        {
-          if (carbon_item->index == carbon_index - 1)
-            {
-              if (debug)
-                g_printerr ("%s: %s incrementing index\n", G_STRFUNC, label);
-              ++carbon_item->index;
-            }
-          else if (carbon_item->index == carbon_index + 1)
-            {
-              if (debug)
-                g_printerr ("%s: %s decrementing index\n", G_STRFUNC, label);
-              --carbon_item->index;
-            }
-          else
-            {
-              if (debug)
-                g_printerr ("%s: %s -> not matching, deleting\n",
-                            G_STRFUNC, label);
-              DeleteMenuItem (carbon_item->menu, carbon_index);
-              carbon_item = NULL;
-            }
-        }
-      if (!carbon_item)
-        carbon_item = carbon_menu_item_create (menu_item, carbon_menu,
-                                               carbon_index, debug);
-      if (!carbon_item) //Bad carbon item, give up
-        continue;
-      if (GTK_IS_CHECK_MENU_ITEM (menu_item))
-        carbon_menu_item_update_active (carbon_item, menu_item);
-      carbon_menu_item_update_accel_closure (carbon_item, menu_item);
-      if (gtk_menu_item_get_submenu (GTK_MENU_ITEM (menu_item)))
-        carbon_menu_item_update_submenu (carbon_item, menu_item, debug);
-      else
-        {
-          carbon_index++;
-          continue;
-        }
-
-      /*The rest only applies to submenus, not to items which should have
-       * been fixed up in carbon_menu_item_create
-       */
-      err = GetMenuAttributes ( carbon_item->submenu, &attrs);
-      carbon_menu_warn (err, "Failed to get menu attributes");
-      if (!gtk_widget_get_visible (menu_item))
-        {
-          if ((attrs & kMenuAttrHidden) == 0)
-            {
-              if (debug)
-                g_printerr ("Hiding menu %s\n", label);
-              err = ChangeMenuAttributes (carbon_item->submenu,
-                                          kMenuAttrHidden, 0);
-              carbon_menu_warn_label (err, label, "Failed to set visible");
-            }
-        }
-      else if ((attrs & kMenuAttrHidden) != 0)
-        {
-          if (debug)
-            g_printerr ("Revealing menu %s\n", label);
-          err = ChangeMenuAttributes (carbon_item->submenu, 0,
-                                      kMenuAttrHidden);
-          carbon_menu_warn_label (err, label, "Failed to set Hidden");
-        }
-      carbon_index++;
-    }
-  g_list_free (children);
-}
-
-static gulong emission_hook_id    = 0;
-static gint   emission_hook_count = 0;
-
-static gboolean
-parent_set_emission_hook (GSignalInvocationHint *ihint, guint n_param_values,
-                          const GValue *param_values, gpointer data)
-{
-  GtkWidget *instance = g_value_get_object (param_values);
-  CarbonMenu *carbon_menu;
-  GtkWidget *previous_parent  = NULL;
-  GtkWidget *menu_shell = NULL;
-
-  if (!GTK_IS_MENU_ITEM (instance))
-    return TRUE;
-  previous_parent = g_value_get_object (param_values + 1);
-  if (GTK_IS_MENU_SHELL (previous_parent))
-    {
-      menu_shell = previous_parent;
-    }
-  else if (GTK_IS_MENU_SHELL (gtk_widget_get_parent (instance)))
-    {
-      menu_shell = gtk_widget_get_parent (instance);
-    }
-  if (!menu_shell)
-    return TRUE;
-  carbon_menu = carbon_menu_get (menu_shell);
-
-  if (!carbon_menu)
-    return TRUE;
-#if DEBUG
-  g_printerr ("%s: item %s (%s) %s %s (%p)\n", G_STRFUNC,
-              get_menu_label_text (instance, NULL),
-              g_type_name (G_TYPE_FROM_INSTANCE (instance)),
-              previous_parent ? "removed from" : "added to",
-              get_menu_label_text (menu_shell, NULL),
-              menu_shell);
-#endif
-  sync_menu_shell (GTK_MENU_SHELL (menu_shell), carbon_menu->menu,
-                   carbon_menu->toplevel, DEBUG_SIGNAL);
-  return TRUE;
-}
-
-static void
-parent_set_emission_hook_remove (GtkWidget *widget, gpointer data)
-{
-  CarbonMenu *carbon_menu = carbon_menu_get (widget);
-  if (carbon_menu)
-    {
-      MenuID id = GetMenuID (carbon_menu->menu);
-      ClearMenuBar ();
-      DeleteMenu (id);
-    }
-  emission_hook_count--;
-  if (emission_hook_count > 0)
-    return;
-  g_signal_remove_emission_hook (
-    g_signal_lookup ("parent-set", GTK_TYPE_WIDGET), emission_hook_id);
-  emission_hook_id = 0;
-}
-
-static gboolean
-window_focus (GtkWindow *window, GdkEventFocus *event, CarbonMenu *menu)
-{
-  OSStatus err = SetRootMenu (menu->menu);
-  if (err)
-    {
-      carbon_menu_warn (err, "Failed to transfer menu");
-    }
-  else if (DEBUG)
-    {
-      g_printerr ("%s: Switched Menu\n", G_STRFUNC);
-    }
-  return FALSE;
-}
-
-
-/*
- * public functions
- */
-
-void
-gtk_mac_menu_set_menu_bar (GtkMenuShell *menu_shell)
-{
-  CarbonMenu *current_menu;
-  MenuRef     carbon_menubar;
-  OSStatus    err;
-  GtkWidget *parent = gtk_widget_get_toplevel (GTK_WIDGET (menu_shell));
-
-  g_return_if_fail (GTK_IS_MENU_SHELL (menu_shell));
-  if (carbon_menu_quark == 0)
-    carbon_menu_quark = g_quark_from_static_string ("CarbonMenu");
-  if (carbon_menu_item_quark == 0)
-    carbon_menu_item_quark = g_quark_from_static_string ("CarbonMenuItem");
-  current_menu = carbon_menu_get (GTK_WIDGET (menu_shell));
-  if (current_menu)
-    {
-      err = SetRootMenu (current_menu->menu);
-      carbon_menu_warn (err, "Failed to set root menu");
-      return;
-    }
-  err = CreateNewMenu (++last_menu_id /*id*/, 0 /*options*/, &carbon_menubar);
-  carbon_menu_err_return (err, "Failed to create menu");
-  err = SetRootMenu (carbon_menubar);
-  carbon_menu_err_return (err, "Failed to set root menu");
-  setup_menu_event_handler ();
-  if (emission_hook_id == 0)
-    {
-      emission_hook_id =
-        g_signal_add_emission_hook (
-          g_signal_lookup ("parent-set", GTK_TYPE_WIDGET), 0,
-          parent_set_emission_hook, NULL, NULL);
-    }
-  emission_hook_count++;
-  g_signal_connect (menu_shell, "destroy",
-                    G_CALLBACK (parent_set_emission_hook_remove), NULL);
-
-#if DEBUG_SET
-  g_printerr ("%s: syncing menubar\n", G_STRFUNC);
-#endif
-  sync_menu_shell (menu_shell, carbon_menubar, TRUE, DEBUG_SET);
-  if (parent)
-    g_signal_connect (parent, "focus-in-event",
-                      G_CALLBACK (window_focus),
-                      carbon_menu_get (GTK_WIDGET (menu_shell)));
-
-}
-
-void
-gtk_mac_menu_set_quit_menu_item (GtkMenuItem *menu_item)
-{
-  MenuRef       appmenu;
-  MenuItemIndex index;
-  OSStatus err;
-
-  g_return_if_fail (GTK_IS_MENU_ITEM (menu_item));
-  setup_menu_event_handler ();
-  err = GetIndMenuItemWithCommandID (NULL, kHICommandQuit, 1,
-                                     &appmenu, &index);
-  carbon_menu_err_return (err, "Failed to obtain Quit Menu");
-  err = SetMenuItemCommandID (appmenu, index, 0);
-  carbon_menu_err_return (err,
-                          "Failed to set Quit menu command id");
-  err = SetMenuItemProperty (appmenu, index, GTK_QUARTZ_MENU_CREATOR,
-                             GTK_QUARTZ_ITEM_WIDGET, sizeof (menu_item),
-                             &menu_item);
-  carbon_menu_err_return (err,
-                          "Failed to associate Quit menu item");
-  gtk_widget_hide (GTK_WIDGET (menu_item));
-  return;
-}
-
-void
-gtk_mac_menu_connect_window_key_handler (GtkWindow *window)
-{
-  if (g_object_get_data (G_OBJECT (window), GTK_MAC_KEY_HANDLER))
-    {
-      g_warning ("Window %p is already connected", window);
-      return;
-    }
-
-  g_signal_connect (window, "key-press-event",
-                    G_CALLBACK (key_press_event), NULL);
-  g_object_set_data (G_OBJECT (window), GTK_MAC_KEY_HANDLER,
-                     GINT_TO_POINTER (1));
-}
-
-/* Most applications will want to have this enabled (which is the
- * defalt). For apps that need to deal with the events themselves, the
- * global handling can be disabled.
- */
-void
-gtk_mac_menu_set_global_key_handler_enabled (gboolean enabled)
-{
-  global_key_handler_enabled = enabled;
-}
-
-/* For testing use only. Returns TRUE if there is a GtkMenuItem assigned to
- * the Quit menu item.
- */
-gboolean
-_gtk_mac_menu_is_quit_menu_item_handled (void)
-{
-  MenuRef       appmenu;
-  MenuItemIndex index;
-  OSStatus err = GetIndMenuItemWithCommandID (NULL, kHICommandQuit, 1,
-                 &appmenu, &index);
-  carbon_menu_warn (err, "failed with");
-  return (err == noErr);
-}
-
-/* Application Menu Functions
- *
- * The "application" menu (the one named the same as the application),
- * is special because there isn't a corresponding Gtk menu, but OSX
- * practice puts the About, Preferences, and Quit menu items in it, so
- * we need to provide a way for app developers to move those items
- * (and others, if they want) from their Gtk locations to the app
- * menu.
- */
-struct _GtkMacMenuGroup
-{
-  GList *items;
-};
-/* app_menu_groups is a list of GtkMacMenuGroups, itself a list of
- * menu_items. They're provided to insert separators into the app
- * menu, grouping the items.
-*/
-static GList *app_menu_groups = NULL;
-
-GtkMacMenuGroup *
-gtk_mac_menu_add_app_menu_group (void)
-{
-  GtkMacMenuGroup *group = g_slice_new0 (GtkMacMenuGroup);
-
-  app_menu_groups = g_list_append (app_menu_groups, group);
-  return group;
-}
-
-/**
- * gtk_mac_menu_add_app_menu_item:
- * @group: Application menu group; helps place separators
- * @menu_item: Menu Item to add to app menu
- * @label: The label name for the menu item
- *
- * Move a menu item to the App menu (the one named with the
- * application's name). This has issues with multiple window menubars,
- * because the menu items are tied to a particular window's menu and
- * because there's only one App menu in Carbon regardless of how many
- * menubars there are. Don't use this for Quit, it has its own
- * function.
- */
-void
-gtk_mac_menu_add_app_menu_item (GtkMacMenuGroup *group, GtkMenuItem *menu_item,
-                                const gchar *label)
-{
-  MenuRef  appmenu;
-  GList   *list;
-  gint     index = 0;
-  CFStringRef cfstr;
-  OSStatus err;
-
-  g_return_if_fail (group != NULL);
-  g_return_if_fail (GTK_IS_MENU_ITEM (menu_item));
-  setup_menu_event_handler ();
-  err = GetIndMenuItemWithCommandID (NULL, kHICommandHide, 1,
-                                     &appmenu, NULL);
-  carbon_menu_err_return (err, "retrieving app menu failed");
-  for (list = app_menu_groups; list; list = g_list_next (list))
-    {
-      GtkMacMenuGroup *list_group = list->data;
-
-      index += g_list_length (list_group->items);
-      /*  adjust index for the separator between groups, but not
-       *  before the first group
-       */
-      if (list_group->items && list->prev)
-        index++;
-      if (group != list_group)
-        continue;
-
-      /*  add a separator before adding the first item, but not
-       *  for the first group
-       */
-      if (!group->items && list->prev)
-        {
-          err = InsertMenuItemTextWithCFString (appmenu, NULL, index,
-                                                kMenuItemAttrSeparator, 0);
-          carbon_menu_err_return (err, "Failed to add separator");
-          index++;
-        }
-      if (!label)
-        label = get_menu_label_text (GTK_WIDGET (menu_item), NULL);
-      cfstr = CFStringCreateWithCString (NULL, label,
-                                         kCFStringEncodingUTF8);
-//Add a new menu item and associate it with the GtkMenuItem.
-      err = InsertMenuItemTextWithCFString (appmenu, cfstr, index, 0, 0);
-      carbon_menu_err_return (err, "Failed to add menu item");
-      err = SetMenuItemProperty (appmenu, index + 1,
-                                 GTK_QUARTZ_MENU_CREATOR,
-                                 GTK_QUARTZ_ITEM_WIDGET,
-                                 sizeof (menu_item), &menu_item);
-      CFRelease (cfstr);
-      carbon_menu_err_return (err, "Failed to associate Gtk Widget");
-      gtk_widget_hide (GTK_WIDGET (menu_item));
-//Finally add the item to the group; this is really just for tracking the count.
-      group->items = g_list_append (group->items, menu_item);
-//Bail out: The rest of the menu doesn't matter.
-      return;
-
-    }
-  if (!list)
-    g_warning ("%s: app menu group %p does not exist", G_STRFUNC, group);
-}
-/**
- * gtk_mac_menu_sync:
- * @menu_shell: The menubar to sync to the main menu.
- * Syncronize changes in the GtkMenuBar to an already-created Mac
- * MenuBar. You must have already run gtk_mac_menu_set_menu_bar on the
- * GtkMenuBar to be synced.
- */
-void
-gtk_mac_menu_sync (GtkMenuShell *menu_shell)
-{
-  CarbonMenu *carbon_menu = carbon_menu_get (GTK_WIDGET (menu_shell));
-  g_return_if_fail (carbon_menu != NULL);
-#if DEBUG_SYNC
-  g_printerr ("%s: syncing menubar\n", G_STRFUNC);
-#endif
-  sync_menu_shell (menu_shell, carbon_menu->menu,
-                   carbon_menu->toplevel, DEBUG_SYNC);
-}
-
-#endif /* __x86_64__ */
diff -Naur a/src/gtk-mac-menu.h b/src/gtk-mac-menu.h
--- a/src/gtk-mac-menu.h	2013-09-26 11:32:34.000000000 -0600
+++ b/src/gtk-mac-menu.h	1969-12-31 17:00:00.000000000 -0700
@@ -1,50 +0,0 @@
-/* GTK+ Integration for the Mac OS X Menubar.
- *
- * Copyright (C) 2007 Pioneer Research Center USA, Inc.
- * Copyright (C) 2007, 2008 Imendio AB
- * Copyright © 2009, 2010 John Ralls
- *
- * For further information, see:
- * http://sourceforge.net/apps/trac/gtk-osx/wiki/Integrate
- *
- * This library is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 2.1 of the License, or
- * (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#ifndef __GTK_MAC_MENU_H__
-#define __GTK_MAC_MENU_H__
-#ifndef __x86_64__
-
-#include <gtk/gtk.h>
-
-G_BEGIN_DECLS
-
-typedef struct _GtkMacMenuGroup GtkMacMenuGroup;
-
-void gtk_mac_menu_set_menu_bar (GtkMenuShell *menu_shell);
-void gtk_mac_menu_set_quit_menu_item (GtkMenuItem *menu_item);
-GtkMacMenuGroup *gtk_mac_menu_add_app_menu_group (void);
-void gtk_mac_menu_add_app_menu_item (GtkMacMenuGroup *group, 
-				     GtkMenuItem *menu_item, 
-				     const gchar *label);
-void gtk_mac_menu_sync (GtkMenuShell *menu_shell);
-gboolean gtk_mac_menu_handle_menu_event (GdkEventKey *event);
-void gtk_mac_menu_set_global_key_handler_enabled (gboolean enabled);
-void gtk_mac_menu_connect_window_key_handler (GtkWindow *window);
-
-G_END_DECLS
-
-#endif /* __x86_64__ */
-#endif /* __GTK_MAC_MENU_H__ */
diff -Naur a/src/test-integration.c b/src/test-integration.c
--- a/src/test-integration.c	2018-05-28 17:08:43.000000000 -0600
+++ b/src/test-integration.c	2021-12-08 19:07:24.000000000 -0700
@@ -61,22 +61,12 @@
 #include <libintl.h>
 #include <stdlib.h>
 
-/* Uncomment ONE of these to test menu-mangling: */
-//#define GTKMACINTEGRATION
-#define GTKOSXAPPLICATION
 
 /* These others are optional */
 #define GTK_DISABLE_DEPRECATION_WARNINGS 1
 #define BUILT_UI //The built UI uses deprecated functions
 //#define QUARTZ_HANDLERS
 
-/* GTKMACINTEGRATION uses Carbon, which isn't available for 64-bit builds. */
-#ifdef __x86_64__
-#undef GTKMACINTEGRATION
-# ifndef GTKOSXAPPLICATION
-#define GTKOSXAPPLICATION
-# endif
-#endif //__x86_64__
 
 #if GTK_CHECK_VERSION (2, 90, 7)
 #include <gdk/gdkkeysyms-compat.h>
@@ -84,14 +74,7 @@
 #include <gdk/gdkkeysyms.h>
 #endif
 
-#ifdef GTKMACINTEGRATION
-#include "gtk-mac-menu.h"
-#include "gtk-mac-dock.h"
-#include "gtk-mac-bundle.h"
-#endif
-#ifdef GTKOSXAPPLICATION
 #include "gtkosxapplication.h"
-#endif
 #include <config.h>
 
 typedef struct
@@ -386,45 +369,6 @@
 }
 #endif //not BUILT_UI
 
-#ifdef GTKMACINTEGRATION
-static void
-dock_clicked_cb (GtkMacDock *dock,
-                 GtkWindow  *window)
-{
-  g_print ("Dock clicked\n");
-  gtk_window_deiconify (window);
-}
-
-static void
-bounce_cb (GtkWidget  *button,
-           GtkMacDock *dock)
-{
-  gtk_mac_dock_attention_request (dock, GTK_MAC_ATTENTION_INFO);
-}
-
-static void
-change_icon_cb (GtkWidget  *button,
-                GtkMacDock *dock)
-{
-  static gboolean   changed;
-  static GdkPixbuf *pixbuf;
-
-  if (!pixbuf)
-    {
-      char filename[PATH_MAX];
-      snprintf (filename, sizeof (filename), "%s/%s", PREFIX,
-                "share/gtk-2.0/demo/gnome-foot.png");
-      pixbuf = gdk_pixbuf_new_from_file (filename, NULL);
-    }
-
-  if (changed)
-    gtk_mac_dock_set_icon_from_pixbuf (dock, NULL);
-  else
-    gtk_mac_dock_set_icon_from_pixbuf (dock, pixbuf);
-
-  changed = !changed;
-}
-#elif defined GTKOSXAPPLICATION
 typedef struct
 {
   GtkosxApplication *app;
@@ -471,22 +415,7 @@
 
   changed = !changed;
 }
-#else //Neither GTKMACINTEGRATION nor GTKOSXAPPLICATION
-static gboolean
-attention_cb (gpointer req)
-{
-}
-static void
-bounce_cb (GtkWidget  *button,
-           gpointer app)
-{
-}
-static void
-change_icon_cb (GtkWidget  *button,
-                gpointer app)
-{
-}
-#endif //GTKMACINTEGRATION
+
 static void
 toggle_prefs_cb (GtkWidget *button,
 		 gpointer user_data)
@@ -589,7 +518,6 @@
 #endif //BUILT_UI
 }
 
-#ifdef GTKOSXAPPLICATION
 static void
 app_active_cb (GtkosxApplication* app, gboolean* data)
 {
@@ -629,21 +557,11 @@
   return FALSE;
 }
 
-#endif //GTKOSXAPPLICATION
-#ifdef GTKMACINTEGRATION
-
-gboolean _gtk_mac_menu_is_quit_menu_item_handled (void);
-
-static GtkWidget *
-create_window (GtkMacDock *dock, const gchar *title)
-{
-#else
-static GtkWidget *
+static GtkWidget*
 create_window (const gchar *title)
 {
-  gpointer	dock = NULL;
-#endif //not GTKMACINTEGRATION
-  GtkWidget	  *window;
+  gpointer        dock = NULL;
+  GtkWidget       *window;
   GtkWidget       *vbox;
   GtkWidget       *menubar;
   GtkWidget       *bbox;
@@ -659,12 +577,7 @@
 #else //not BUILT_UI
   GtkAccelGroup *accel_group = gtk_accel_group_new ();
 #endif //not BUILT_UI
-#ifdef GTKMACINTEGRATION
-  GtkMacMenuGroup *group;
-#endif //GTKMACINTEGRATION
-#ifdef GTKOSXAPPLICATION
   GtkosxApplication *theApp = g_object_new (GTKOSX_TYPE_APPLICATION, NULL);
-#endif //GTKOSXAPPLICATION
   window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
   if (title)
     gtk_window_set_title (GTK_WINDOW (window), title);
@@ -770,19 +683,6 @@
 #  endif // !defined QUARTZ_HANDLERS && !defined BUILT_UI
 # endif  //GTKOSXAPPLICATION
 #endif //defined GTK_MAC_MENU || defined GTKOSXAPPLICATION
-#ifdef GTKMACINTEGRATION
-  gtk_mac_menu_set_menu_bar (GTK_MENU_SHELL (menubar));
-  gtk_mac_menu_set_quit_menu_item (GTK_MENU_ITEM (items->quit_item));
-  group = gtk_mac_menu_add_app_menu_group ();
-  gtk_mac_menu_add_app_menu_item  (group,
-                                   GTK_MENU_ITEM (items->about_item),
-                                   "About");
-  group = gtk_mac_menu_add_app_menu_group ();
-  gtk_mac_menu_add_app_menu_item  (group,
-                                   GTK_MENU_ITEM (items->preferences_item),
-                                   "Preferences");
-#endif //GTKMACINTEGRATION
-#ifdef GTKOSXAPPLICATION
   GtkWidget *sep;
   gtkosx_application_set_menu_bar (theApp, GTK_MENU_SHELL (menubar));
   gtkosx_application_set_about_item  (theApp, items->about_item);
@@ -798,7 +698,6 @@
 
   gtkosx_application_set_help_menu (theApp, GTK_MENU_ITEM (items->help_menu));
   gtkosx_application_set_window_menu (theApp, GTK_MENU_ITEM (items->window_menu));
-#endif //GTKOSXAPPLICATION
   if (!menu_items_quark)
     menu_items_quark = g_quark_from_static_string ("MenuItem");
   g_object_set_qdata_full (G_OBJECT (window), menu_items_quark,
@@ -813,12 +712,7 @@
 #ifndef BUILT_UI
   GtkWidget *window2;
 #endif
-#ifdef GTKMACINTEGRATION
-  GtkMacDock      *dock;
-#endif //GTKMACINTEGRATION
-#ifdef GTKOSXAPPLICATION
   GtkosxApplication *theApp;
-#endif //GTKOSXAPPLICATION
   setlocale (LC_ALL, "");
   bindtextdomain (PACKAGE_NAME, LOCALEDIR);
   textdomain (PACKAGE_NAME);
@@ -829,20 +723,6 @@
   gdk_threads_init ();
 #endif //not Gtk3
   gtk_init (&argc, &argv);
-#ifdef GTKMACINTEGRATION
-  dock = gtk_mac_dock_get_default ();
-  window1 = create_window (dock, "Test Integration Window 1");
-  dock = gtk_mac_dock_new ();
-  g_signal_connect (dock,
-                    "clicked",
-                    G_CALLBACK (dock_clicked_cb),
-                    window1);
-  g_signal_connect (dock,
-
-                    "quit-activate",
-                    G_CALLBACK (gtk_main_quit),
-                    window1);
-#elif defined(GTKOSXAPPLICATION)
 
   theApp  = g_object_new (GTKOSX_TYPE_APPLICATION, NULL);
   window1 = create_window ("Test Integration Window 1");
@@ -874,14 +754,8 @@
         g_print ("TestIntegration Error! Bundle Has ID %s\n", id);
       }
   }
-#else //i.e., no integration
-  window1 = create_window ("Test Integration Window 1");
-  window2 = create_window ("Test Integration Window 2");
-#endif //GTKOSXAPPLICATION
   gtk_accel_map_load ("accel_map");
   gtk_main ();
-#ifdef GTKOSXAPPLICATION
   g_object_unref (theApp);
-#endif //GTKOSXAPPLICATION
   return 0;
 }
