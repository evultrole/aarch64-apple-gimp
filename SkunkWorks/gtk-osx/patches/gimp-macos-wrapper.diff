diff --git a/app/main.c b/app/main.c
index d743999edb..0bed77db8a 100644
--- a/app/main.c
+++ b/app/main.c
@@ -38,6 +38,13 @@
 
 #endif /* G_OS_WIN32 */
 
+#ifdef __APPLE__
+#include <sys/param.h>
+#include <libgen.h> /* dirname */
+#include <sys/stat.h>
+#include <sys/param.h> /* PATH_MAX */
+#endif /* __APPLE__ */
+
 #ifndef GIMP_CONSOLE_COMPILATION
 #include <gdk/gdk.h>
 #else
@@ -298,6 +305,80 @@ static const GOptionEntry main_entries[] =
   { NULL }
 };
 
+#ifdef __APPLE__
+static void
+gimp_macos_setenv (const char * progname)
+{
+  /* helper to set environment variables for GIMP to be rellocatable.
+   * Due to the latest changes it is not recommended to set it in the shell
+   * wrapper anymore.
+   */
+  char resolved_path[PATH_MAX];
+  struct rlimit limit;
+  limit.rlim_cur = 10000;
+  limit.rlim_max = 10000;
+  /* on some OSX installations open file limit is 256 and GIMP needs more */
+  setrlimit(RLIMIT_NOFILE, &limit);
+  if (realpath (progname, resolved_path) && !getenv ("GIMP_NO_WRAPPER")) {
+    /* set path to the app folder to make sure that our python is called
+     * instead of system one
+     */
+    char *path;
+    char tmp[PATH_MAX];
+    char * app_dir;
+    char res_dir[PATH_MAX];
+    size_t path_len;
+    struct stat sb;
+
+    app_dir = dirname (resolved_path);
+    snprintf (tmp, sizeof(tmp), "%s/../Resources", app_dir);
+    if( realpath (tmp, res_dir) && !stat (res_dir,&sb) && S_ISDIR (sb.st_mode))
+    {
+      g_print ("GIMP is started as MacOS application\n");
+    }
+    else
+      return;
+
+    path_len = strlen (getenv("PATH") ?: "") + strlen(app_dir) + 2;
+    path = malloc (path_len);
+    if (!path) {
+      perror ("malloc");
+      exit (EXIT_FAILURE);
+    }
+    if (getenv ("PATH"))
+      snprintf (path, path_len, "%s:%s", app_dir, getenv("PATH"));
+    else
+      snprintf (path, path_len, "%s", app_dir);
+    setenv ("PATH", path, 1);
+    free (path);
+    snprintf (tmp, sizeof(tmp), "%s/lib/gtk-2.0/2.10.0", res_dir);
+    setenv ("GTK_PATH", tmp, 1);
+    snprintf (tmp, sizeof(tmp), "%s/etc/gtk-2.0/gtk.immodules", res_dir);
+    setenv ("GTK_IM_MODULE_FILE", tmp, 1);
+    snprintf (tmp, sizeof(tmp), "%s/lib/gegl-0.4", res_dir);
+    setenv ("GEGL_PATH", tmp, 1);
+    snprintf (tmp, sizeof(tmp), "%s/lib/babl-0.1", res_dir);
+    setenv ("BABL_PATH", tmp, 1);
+    snprintf (tmp, sizeof(tmp), "%s/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache", res_dir);
+    setenv ("GDK_PIXBUF_MODULE_FILE", tmp, 1);
+    snprintf (tmp, sizeof(tmp), "%s/etc/fonts", res_dir);
+    setenv ("FONTCONFIG_PATH", tmp, 1);
+    snprintf (tmp, sizeof(tmp), "%s", res_dir);
+    setenv ("PYTHONHOME", tmp, 1);
+    snprintf (tmp, sizeof(tmp), "%s/lib/python2.7:%s/lib/gimp/2.0/python", res_dir, res_dir);
+    setenv ("PYTHONPATH", tmp, 1);
+    snprintf (tmp, sizeof(tmp), "%s/lib/gio/modules", res_dir);
+    setenv ("GIO_MODULE_DIR", tmp, 1);
+    snprintf (tmp, sizeof(tmp), "%s/share/libwmf/fonts", res_dir);
+    setenv ("WMF_FONTDIR", tmp, 1);
+    if(getenv ("HOME")!=NULL) {
+      snprintf (tmp, sizeof(tmp), "%s/Library/Application Support/GIMP/2.10/cache", getenv("HOME"));
+      setenv ("XDG_CACHE_HOME", tmp, 1);
+    }
+  }
+}
+#endif
+
 int
 main (int    argc,
       char **argv)
@@ -314,6 +395,22 @@ main (int    argc,
 #ifdef ENABLE_WIN32_DEBUG_CONSOLE
   gimp_open_console_window ();
 #endif
+#ifdef __APPLE__
+  /* remove MacOS session identifier from the command line args */
+  int newargc = 0;
+  for (int i = 0; i < argc; i++) {
+    if (strncmp (argv[i], "-psn_",5)){
+      argv[newargc] = argv[i];
+      newargc++;
+    }
+  }
+  if (argc > newargc) {
+    argv[newargc] = NULL; /* glib expects NULL terminated array */
+    argc = newargc;
+  }
+
+  gimp_macos_setenv (argv[0]);
+#endif
 
 #if defined (__GNUC__) && defined (_WIN64)
   /* mingw-w64, at least the unstable build from late July 2008,
