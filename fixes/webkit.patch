--- a/Source/WTF/wtf/FastMalloc.cpp	2021-03-15 00:06:32.000000000 -0600
+++ b/Source/WTF/wtf/FastMalloc.cpp	2021-03-15 00:06:32.000000000 -0600
@@ -93,7 +93,9 @@
 #if OS(DARWIN)
 #include <malloc/malloc.h>
 #endif
-
+#if OS(DARWIN) && CPU(ARM64)
+#include <arm/param.h>
+#endif
 #ifndef NO_TCMALLOC_SAMPLES
 #ifdef WTF_CHANGES
 #define NO_TCMALLOC_SAMPLES
@@ -633,7 +635,13 @@
 // sense.  In particular, if kMaxSize increases, you may have to
 // increase kNumClasses as well.
 #if OS(DARWIN)
-#    define K_PAGE_SHIFT PAGE_SHIFT
+#    if CPU(X86_64)
+#        define K_PAGE_SHIFT I386_PGSHIFT
+#    elif CPU(ARM64)
+#        define K_PAGE_SHIFT PGSHIFT
+#    else
+#        define K_PAGE_SHIFT PAGE_SHIFT
+#    endif
 #    if (K_PAGE_SHIFT == 12)
 #        define K_NUM_CLASSES 68
 #    elif (K_PAGE_SHIFT == 14)

--- a/Source/JavaScriptCore/assembler/ARM64Assembler.h	2016-04-10 00:48:36.000000000 -0600
+++ b/Source/JavaScriptCore/assembler/ARM64Assembler.h	2016-04-10 00:48:36.000000000 -0600
@@ -33,6 +33,12 @@
 #include <wtf/Vector.h>
 #include <stdint.h>
 
+#if OS(DARWIN) && CPU(ARM64)
+#include <arm/param.h>
+#include <libkern/OSCacheControl.h>
+#endif
+
+
 #define CHECK_DATASIZE_OF(datasize) ASSERT(datasize == 32 || datasize == 64)
 #define DATASIZE_OF(datasize) ((datasize == 64) ? Datasize_64 : Datasize_32)
 #define MEMOPSIZE_OF(datasize) ((datasize == 8 || datasize == 128) ? MemOpSize_8_or_128 : (datasize == 16) ? MemOpSize_16 : (datasize == 32) ? MemOpSize_32 : MemOpSize_64)
@@ -2756,6 +2762,8 @@
     {
 #if OS(IOS)
         sys_cache_control(kCacheFunctionPrepareForExecution, code, size);
+#elif OS(MAC_OS_X)
+        sys_cache_control(kCacheFunctionPrepareForExecution, code, size);
 #else
 #error "The cacheFlush support is missing on this platform."
 #endif

--- a/Source/JavaScriptCore/disassembler/LLVMDisassembler.cpp	2016-04-10 00:48:36.000000000 -0600
+++ b/Source/JavaScriptCore/disassembler/LLVMDisassembler.cpp	2021-03-16 07:03:31.000000000 -0600
@@ -87,6 +87,8 @@
     triple = "x86_64-apple-darwin";
 #elif CPU(X86)
     triple = "x86-apple-darwin";
+#elif CPU(ARM64)
+    triple = "aarch64-apple-darwin";
 #else
 #error "LLVM disassembler currently not supported on this CPU."
 #endif




--- a/Source/autotools/dolt.m4	2016-04-10 00:48:38.000000000 -0600
+++ b/Source/autotools/dolt.m4	2021-03-16 07:23:59.000000000 -0600
@@ -26,7 +26,7 @@
 |amd64-*-freebsd*|i?86-*-freebsd*|ia64-*-freebsd*)
     pic_options='-fPIC'
     ;;
-i?86-apple-darwin*)
+*-apple-darwin*)
     pic_options='-fno-common'
     ;;
 *mingw32*)



--- a/Source/WebCore/page/NavigatorBase.cpp	2016-04-10 00:48:37.000000000 -0600
+++ b/Source/WebCore/page/NavigatorBase.cpp	2021-03-16 07:53:23.000000000 -0600
@@ -46,6 +46,8 @@
 #define WEBCORE_NAVIGATOR_PLATFORM "MacPPC"
 #elif OS(MAC_OS_X) && (CPU(X86) || CPU(X86_64))
 #define WEBCORE_NAVIGATOR_PLATFORM "MacIntel"
+ #elif OS(MAC_OS_X) && CPU(ARM64)
+ #define WEBCORE_NAVIGATOR_PLATFORM "MacArm"
 #elif OS(WINDOWS)
 #define WEBCORE_NAVIGATOR_PLATFORM "Win32"
 #else


--- a/Tools/gtk/gtkdoc.py 2016-04-10 00:48:37.000000000 -0600
+++ b/Tools/gtk/gtkdoc.py 2021-12-07 04:11:12.000000000 -0600

@@ -154,7 +154,7 @@
         if not os.access(path, os.F_OK | os.R_OK):
             return
         self.logger.debug('deleting %s', path)
-        os.unlink(path)
+#broken with current Bison versions        os.unlink(path)
 
     def _create_directory_if_nonexistent(self, path):
         try:
         
         
