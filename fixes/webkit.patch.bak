--- a/Source/WTF/wtf/Assertions.h	2013-01-18 15:03:57.000000000 -0800
+++ b/Source/WTF/wtf/Assertions.h	2013-01-18 15:04:46.000000000 -0800
@@ -371,7 +371,8 @@ while (0)
 // a function. Hence it uses macro naming convention.
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wmissing-noreturn"
-static inline void UNREACHABLE_FOR_PLATFORM()
+__attribute__ ((__always_inline__))
+static __inline__ void UNREACHABLE_FOR_PLATFORM()
 {
     ASSERT_NOT_REACHED();
 }

--- a/Source/WebCore/platform/text/TextCodecUTF8.h	2012-04-12 17:24:24.000000000 -0700
+++ b/Source/WebCore/platform/text/TextCodecUTF8.h	2012-04-12 17:46:05.000000000 -0700
@@ -28,6 +28,9 @@
 
 #include "TextCodec.h"
 
+/* https://bugs.webkit.org/show_bug.cgi?id=65811 */
+#include "../../../JavaScriptCore/icu/unicode/utf8.h"
+
 namespace WebCore {
 
 class TextCodecUTF8 : public TextCodec {


--- a/Source/JavaScriptCore/offlineasm/offsets.rb	2012-11-23 14:12:16.000000000 -0600
+++ b/Source/JavaScriptCore/offlineasm/offsets.rb	2013-01-22 19:35:47.000000000 -0600
@@ -109,7 +109,11 @@
     File.open(file, "r") {
         | inp |
         loop {
-            byte = inp.getbyte
+            if RUBY_VERSION >= '1.8.7'
+              byte = inp.getbyte
+            else
+              byte = inp.getc
+            end
             break unless byte
             fileBytes << byte
         }

--- a/Source/WebCore/plugins/PluginView.cpp	2015-05-20 02:03:24.000000000 -0700
+++ b/Source/WebCore/plugins/PluginView.cpp	2015-08-08 15:02:30.000000000 -0700
@@ -839,7 +839,7 @@
 #if defined(XP_MACOSX)
     , m_contextRef(0)
 #endif
-#if defined(XP_UNIX) && ENABLE(NETSCAPE_PLUGIN_API)
+#if PLATFORM(X11) && ENABLE(NETSCAPE_PLUGIN_API)
     , m_hasPendingGeometryChange(true)
     , m_drawable(0)
     , m_visual(0)

--- a/Source/WebCore/plugins/PluginView.h	2015-05-20 02:03:24.000000000 -0700
+++ b/Source/WebCore/plugins/PluginView.h	2015-08-08 15:02:30.000000000 -0700
@@ -378,7 +378,7 @@
         void setNPWindowIfNeeded();
 #endif
 
-#if defined(XP_UNIX) && ENABLE(NETSCAPE_PLUGIN_API)
+#if PLATFORM(X11) && ENABLE(NETSCAPE_PLUGIN_API)
         bool m_hasPendingGeometryChange;
         Pixmap m_drawable;
         Visual* m_visual;
--- a/Source/WebCore/GNUmakefile.list.am	2015-06-16 09:12:37.000000000 +0200
+++ b/Source/WebCore/GNUmakefile.list.am	2015-06-16 09:13:38.000000000 +0200
@@ -6315,11 +6315,9 @@
 
 if TARGET_QUARTZ
 if !TARGET_X11
-if ENABLE_WEBKIT2
 webcore_sources += \
 	Source/WebCore/plugins/PluginPackageNone.cpp \
 	Source/WebCore/plugins/PluginViewNone.cpp
-endif # END ENABLE_WEBKIT2
 endif # END !TARGET_X11
 platformgtk_sources += \
 	Source/WebCore/platform/cairo/WidgetBackingStoreCairo.h \



--- a/Source/WebCore/platform/audio/FFTFrame.h	2014-01-23 11:33:19.000000000 -0800
+++ b/Source/WebCore/platform/audio/FFTFrame.h	2014-02-05 17:36:33.000000000 -0800
@@ -47,13 +47,6 @@
 #include "mkl_dfti.h"
 #endif // USE(WEBAUDIO_MKL)
 
-#if USE(WEBAUDIO_GSTREAMER)
-#include <glib.h>
-G_BEGIN_DECLS
-#include <gst/fft/gstfftf32.h>
-G_END_DECLS
-#endif // USE(WEBAUDIO_GSTREAMER)
-
 #if USE(WEBAUDIO_OPENMAX_DL_FFT)
 #include "dl/sp/api/armSP.h"
 #include "dl/sp/api/omxSP.h"
@@ -63,6 +56,13 @@ struct RDFTContext;
 
 #endif // !USE_ACCELERATE_FFT
 
+#if USE(WEBAUDIO_GSTREAMER)
+#include <glib.h>
+G_BEGIN_DECLS
+#include <gst/fft/gstfftf32.h>
+G_END_DECLS
+#endif // USE(WEBAUDIO_GSTREAMER)
+
 #if USE(WEBAUDIO_IPP)
 #include <ipps.h>
 #endif // USE(WEBAUDIO_IPP)

--- a/Source/WTF/wtf/Platform.h	2015-01-06 13:30:52.000000000 -0800
+++ b/Source/WTF/wtf/Platform.h	2015-01-06 13:42:15.000000000 -0800
@@ -590,11 +590,14 @@
 
 #if OS(DARWIN)
 
+#if __MAC_OS_X_VERSION_MIN_REQUIRED >= 1060 || PLATFORM(IOS)
 #define HAVE_DISPATCH_H 1
-#define HAVE_MADV_FREE 1
 #define HAVE_MADV_FREE_REUSE 1
-#define HAVE_MERGESORT 1
 #define HAVE_PTHREAD_SETNAME_NP 1
+#endif
+
+#define HAVE_MADV_FREE 1
+#define HAVE_MERGESORT 1
 #define HAVE_READLINE 1
 #define HAVE_SYS_TIMEB_H 1
 #define WTF_USE_ACCELERATE 1

--- a/Source/WTF/wtf/FastMalloc.cpp	2015-01-07 16:04:31.000000000 -0800
+++ b/Source/WTF/wtf/FastMalloc.cpp	2015-01-07 16:06:05.000000000 -0800
@@ -5095,8 +5095,13 @@ void* FastMallocZone::zoneRealloc(malloc
 extern "C" {
 malloc_introspection_t jscore_fastmalloc_introspection = { &FastMallocZone::enumerate, &FastMallocZone::goodSize, &FastMallocZone::check, &FastMallocZone::print,
     &FastMallocZone::log, &FastMallocZone::forceLock, &FastMallocZone::forceUnlock, &FastMallocZone::statistics
+
+#if OS(IOS) || __MAC_OS_X_VERSION_MAX_ALLOWED >= 1060
     , 0 // zone_locked will not be called on the zone unless it advertises itself as version five or higher.
+#endif
+#if OS(IOS) || __MAC_OS_X_VERSION_MAX_ALLOWED >= 1070
     , 0, 0, 0, 0 // These members will not be used unless the zone advertises itself as version seven or higher.
+#endif
 
     };
 }

--- a/Source/JavaScriptCore/GNUmakefile.am	2014-01-12 11:11:12.000000000 -0800
+++ b/Source/JavaScriptCore/GNUmakefile.am	2014-01-15 12:33:06.000000000 -0800
@@ -26,6 +26,7 @@ libjavascriptcoregtk_@WEBKITGTK_API_MAJO
 	$(javascriptcore_sources)
 
 libjavascriptcoregtk_@WEBKITGTK_API_MAJOR_VERSION@_@WEBKITGTK_API_MINOR_VERSION@_la_LIBADD = \
+	-ledit \
 	-lpthread \
 	libWTF.la \
 	$(GLIB_LIBS) \

diff -ur Source/JavaScriptCore/API/JSBasePrivate.h Source/JavaScriptCore/API/JSBasePrivate.h
--- a/Source/JavaScriptCore/API/JSBasePrivate.h	2015-12-07 15:46:53.000000000 -0800
+++ b/Source/JavaScriptCore/API/JSBasePrivate.h	2015-12-07 15:50:37.000000000 -0800
@@ -43,7 +43,7 @@
 garbage collector to collect soon, hoping to reclaim that large non-GC memory
 region.
 */
-JS_EXPORT void JSReportExtraMemoryCost(JSContextRef ctx, size_t size) CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT void JSReportExtraMemoryCost(JSContextRef ctx, size_t size);
 
 JS_EXPORT void JSDisableGCTimer(void);
 
diff -ur Source/JavaScriptCore/API/JSContextRef.h Source/JavaScriptCore/API/JSContextRef.h
--- a/Source/JavaScriptCore/API/JSContextRef.h	2015-12-07 15:46:53.000000000 -0800
+++ b/Source/JavaScriptCore/API/JSContextRef.h	2015-12-07 15:52:46.000000000 -0800
@@ -48,7 +48,7 @@
  synchronization is required.
 @result The created JSContextGroup.
 */
-JS_EXPORT JSContextGroupRef JSContextGroupCreate() CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT JSContextGroupRef JSContextGroupCreate();
 
 /*!
 @function
@@ -56,14 +56,14 @@
 @param group The JSContextGroup to retain.
 @result A JSContextGroup that is the same as group.
 */
-JS_EXPORT JSContextGroupRef JSContextGroupRetain(JSContextGroupRef group) CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT JSContextGroupRef JSContextGroupRetain(JSContextGroupRef group);
 
 /*!
 @function
 @abstract Releases a JavaScript context group.
 @param group The JSContextGroup to release.
 */
-JS_EXPORT void JSContextGroupRelease(JSContextGroupRef group) CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT void JSContextGroupRelease(JSContextGroupRef group);
 
 /*!
 @function
@@ -78,7 +78,7 @@
  NULL to use the default object class.
 @result A JSGlobalContext with a global object of class globalObjectClass.
 */
-JS_EXPORT JSGlobalContextRef JSGlobalContextCreate(JSClassRef globalObjectClass) CF_AVAILABLE(10_5, 7_0);
+JS_EXPORT JSGlobalContextRef JSGlobalContextCreate(JSClassRef globalObjectClass);
 
 /*!
 @function
@@ -92,7 +92,7 @@
 @result A JSGlobalContext with a global object of class globalObjectClass and a context
  group equal to group.
 */
-JS_EXPORT JSGlobalContextRef JSGlobalContextCreateInGroup(JSContextGroupRef group, JSClassRef globalObjectClass) CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT JSGlobalContextRef JSGlobalContextCreateInGroup(JSContextGroupRef group, JSClassRef globalObjectClass);
 
 /*!
 @function
@@ -123,7 +123,7 @@
 @param ctx The JSContext whose group you want to get.
 @result ctx's group.
 */
-JS_EXPORT JSContextGroupRef JSContextGetGroup(JSContextRef ctx) CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT JSContextGroupRef JSContextGetGroup(JSContextRef ctx);
 
 /*!
 @function
@@ -131,7 +131,7 @@
 @param ctx The JSContext whose global context you want to get.
 @result ctx's global context.
 */
-JS_EXPORT JSGlobalContextRef JSContextGetGlobalContext(JSContextRef ctx) CF_AVAILABLE(10_7, 7_0);
+JS_EXPORT JSGlobalContextRef JSContextGetGlobalContext(JSContextRef ctx);
 
 /*!
 @function
diff -ur Source/JavaScriptCore/API/JSContextRefPrivate.h Source/JavaScriptCore/API/JSContextRefPrivate.h
--- a/Source/JavaScriptCore/API/JSContextRefPrivate.h	2015-12-07 15:46:53.000000000 -0800
+++ b/Source/JavaScriptCore/API/JSContextRefPrivate.h	2015-12-07 15:53:30.000000000 -0800
@@ -44,7 +44,7 @@
 @param ctx The JSContext whose backtrace you want to get
 @result A string containing the backtrace
 */
-JS_EXPORT JSStringRef JSContextCreateBacktrace(JSContextRef ctx, unsigned maxStackSize) CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT JSStringRef JSContextCreateBacktrace(JSContextRef ctx, unsigned maxStackSize);
     
 
 /*! 
@@ -85,14 +85,14 @@
  need to call JSContextGroupSetExecutionTimeLimit before you start executing
  any scripts.
 */
-JS_EXPORT void JSContextGroupSetExecutionTimeLimit(JSContextGroupRef, double limit, JSShouldTerminateCallback, void* context) CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT void JSContextGroupSetExecutionTimeLimit(JSContextGroupRef, double limit, JSShouldTerminateCallback, void* context);
 
 /*!
 @function
 @abstract Clears the script execution time limit.
 @param group The JavaScript context group that the time limit is cleared on.
 */
-JS_EXPORT void JSContextGroupClearExecutionTimeLimit(JSContextGroupRef) CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT void JSContextGroupClearExecutionTimeLimit(JSContextGroupRef);
 
 #ifdef __cplusplus
 }
diff -ur Source/JavaScriptCore/API/JSObjectRef.h Source/JavaScriptCore/API/JSObjectRef.h
--- a/Source/JavaScriptCore/API/JSObjectRef.h	2015-12-07 15:46:53.000000000 -0800
+++ b/Source/JavaScriptCore/API/JSObjectRef.h	2015-12-07 15:54:25.000000000 -0800
@@ -441,7 +441,7 @@
  @discussion The behavior of this function does not exactly match the behavior of the built-in Array constructor. Specifically, if one argument 
  is supplied, this function returns an array with one element.
  */
-JS_EXPORT JSObjectRef JSObjectMakeArray(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception) CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT JSObjectRef JSObjectMakeArray(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception);
 
 /*!
  @function
@@ -452,7 +452,7 @@
  @param exception A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
  @result A JSObject that is a Date.
  */
-JS_EXPORT JSObjectRef JSObjectMakeDate(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception) CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT JSObjectRef JSObjectMakeDate(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception);
 
 /*!
  @function
@@ -463,7 +463,7 @@
  @param exception A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
  @result A JSObject that is a Error.
  */
-JS_EXPORT JSObjectRef JSObjectMakeError(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception) CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT JSObjectRef JSObjectMakeError(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception);
 
 /*!
  @function
@@ -474,7 +474,7 @@
  @param exception A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
  @result A JSObject that is a RegExp.
  */
-JS_EXPORT JSObjectRef JSObjectMakeRegExp(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception) CF_AVAILABLE(10_6, 7_0);
+JS_EXPORT JSObjectRef JSObjectMakeRegExp(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception);
 
 /*!
 @function
diff -ur Source/JavaScriptCore/API/JSValueRef.h Source/JavaScriptCore/API/JSValueRef.h
--- a/Source/JavaScriptCore/API/JSValueRef.h	2015-12-07 15:46:53.000000000 -0800
+++ b/Source/JavaScriptCore/API/JSValueRef.h	2015-12-07 15:55:30.000000000 -0800
@@ -218,7 +218,7 @@
  @param string   The JSString containing the JSON string to be parsed.
  @result         A JSValue containing the parsed value, or NULL if the input is invalid.
  */
-JS_EXPORT JSValueRef JSValueMakeFromJSONString(JSContextRef ctx, JSStringRef string) CF_AVAILABLE(10_7, 7_0);
+JS_EXPORT JSValueRef JSValueMakeFromJSONString(JSContextRef ctx, JSStringRef string);
 
 /*!
  @function
@@ -229,7 +229,7 @@
  @param exception A pointer to a JSValueRef in which to store an exception, if any. Pass NULL if you do not care to store an exception.
  @result         A JSString with the result of serialization, or NULL if an exception is thrown.
  */
-JS_EXPORT JSStringRef JSValueCreateJSONString(JSContextRef ctx, JSValueRef value, unsigned indent, JSValueRef* exception) CF_AVAILABLE(10_7, 7_0);
+JS_EXPORT JSStringRef JSValueCreateJSONString(JSContextRef ctx, JSValueRef value, unsigned indent, JSValueRef* exception);
 
 /* Converting to primitive values */
 

--- a/Source/WebCore/platform/graphics/SegmentedFontData.cpp	2016-04-09 23:48:37.000000000 -0700
+++ b/Source/WebCore/platform/graphics/SegmentedFontData.cpp	2019-10-06 14:27:09.000000000 -0700
@@ -61,7 +61,7 @@
 {
     UChar32 c;
     for (int i = 0; i < length; ) {
-        U16_NEXT(characters, i, length, c)
+        U16_NEXT(characters, i, length, c);
         if (!containsCharacter(c))
             return false;
     }
--- a/Source/WebCore/dom/Document.cpp	2016-04-09 23:48:37.000000000 -0700
+++ b/Source/WebCore/dom/Document.cpp	2019-10-06 14:28:52.000000000 -0700
@@ -3912,12 +3912,12 @@
     unsigned i = 0;
 
     UChar32 c;
-    U16_NEXT(characters, i, length, c)
+    U16_NEXT(characters, i, length, c);
     if (!isValidNameStart(c))
         return false;
 
     while (i < length) {
-        U16_NEXT(characters, i, length, c)
+        U16_NEXT(characters, i, length, c);
         if (!isValidNamePart(c))
             return false;
     }
@@ -3980,7 +3980,7 @@
     const UChar* s = qualifiedName.deprecatedCharacters();
     for (unsigned i = 0; i < length;) {
         UChar32 c;
-        U16_NEXT(s, i, length, c)
+        U16_NEXT(s, i, length, c);
         if (c == ':') {
             if (sawColon) {
                 ec = NAMESPACE_ERR;
--- a/Source/JavaScriptCore/API/JSStringRef.cpp	2016-04-09 23:48:36.000000000 -0700
+++ b/Source/JavaScriptCore/API/JSStringRef.cpp	2019-09-29 17:49:17.000000000 -0700
@@ -37,7 +37,7 @@
 JSStringRef JSStringCreateWithCharacters(const JSChar* chars, size_t numChars)
 {
     initializeThreading();
-    return OpaqueJSString::create(chars, numChars).leakRef();
+    return OpaqueJSString::create(reinterpret_cast<const UChar*>(chars), numChars).leakRef();
 }
 
 JSStringRef JSStringCreateWithUTF8CString(const char* string)
@@ -62,7 +62,7 @@
 JSStringRef JSStringCreateWithCharactersNoCopy(const JSChar* chars, size_t numChars)
 {
     initializeThreading();
-    return OpaqueJSString::create(StringImpl::createWithoutCopying(chars, numChars)).leakRef();
+    return OpaqueJSString::create(StringImpl::createWithoutCopying(reinterpret_cast<const UChar*>(chars), numChars)).leakRef();
 }
 
 JSStringRef JSStringRetain(JSStringRef string)
@@ -83,7 +83,7 @@
 
 const JSChar* JSStringGetCharactersPtr(JSStringRef string)
 {
-    return string->characters();
+    return reinterpret_cast<const JSChar*>(string->characters());
 }
 
 size_t JSStringGetMaximumUTF8CStringSize(JSStringRef string)
--- a/Source/JavaScriptCore/runtime/DateConversion.cpp	2013-08-03 09:10:38.000000000 -0700
+++ b/Source/JavaScriptCore/runtime/DateConversion.cpp	2019-09-29 17:51:02.000000000 -0700
@@ -107,7 +107,8 @@
 #if OS(WINDOWS)
             TIME_ZONE_INFORMATION timeZoneInformation;
             GetTimeZoneInformation(&timeZoneInformation);
-            const WCHAR* timeZoneName = t.isDST() ? timeZoneInformation.DaylightName : timeZoneInformation.StandardName;
+            const WCHAR* winTimeZoneName = t.isDST() ? timeZoneInformation.DaylightName : timeZoneInformation.StandardName;
+	    String timeZoneName(reinterpret_cast<const UChar*>(winTimeZoneName));
 #else
             struct tm gtm = t;
             char timeZoneName[70];



--- a/Source/WTF/wtf/FastMalloc.cpp	2021-03-15 00:06:32.000000000 -0600
+++ b/Source/WTF/wtf/FastMalloc.cpp	2021-03-15 00:06:32.000000000 -0600
@@ -93,7 +93,9 @@
 #if OS(DARWIN)
 #include <malloc/malloc.h>
 #endif
-
+#if OS(DARWIN) && CPU(ARM64)
+#include <arm/param.h>
+#endif
 #ifndef NO_TCMALLOC_SAMPLES
 #ifdef WTF_CHANGES
 #define NO_TCMALLOC_SAMPLES
@@ -633,7 +635,13 @@
 // sense.  In particular, if kMaxSize increases, you may have to
 // increase kNumClasses as well.
 #if OS(DARWIN)
-#    define K_PAGE_SHIFT PAGE_SHIFT
+#    if CPU(X86_64)
+#        define K_PAGE_SHIFT I386_PGSHIFT
+#    elif CPU(ARM64)
+#        define K_PAGE_SHIFT PGSHIFT
+#    else
+#        define K_PAGE_SHIFT PAGE_SHIFT
+#    endif
 #    if (K_PAGE_SHIFT == 12)
 #        define K_NUM_CLASSES 68
 #    elif (K_PAGE_SHIFT == 14)

--- a/Source/JavaScriptCore/assembler/ARM64Assembler.h	2016-04-10 00:48:36.000000000 -0600
+++ b/Source/JavaScriptCore/assembler/ARM64Assembler.h	2016-04-10 00:48:36.000000000 -0600
@@ -33,6 +33,12 @@
 #include <wtf/Vector.h>
 #include <stdint.h>
 
+#if OS(DARWIN) && CPU(ARM64)
+#include <arm/param.h>
+#include <libkern/OSCacheControl.h>
+#endif
+
+
 #define CHECK_DATASIZE_OF(datasize) ASSERT(datasize == 32 || datasize == 64)
 #define DATASIZE_OF(datasize) ((datasize == 64) ? Datasize_64 : Datasize_32)
 #define MEMOPSIZE_OF(datasize) ((datasize == 8 || datasize == 128) ? MemOpSize_8_or_128 : (datasize == 16) ? MemOpSize_16 : (datasize == 32) ? MemOpSize_32 : MemOpSize_64)
@@ -2756,6 +2762,8 @@
     {
 #if OS(IOS)
         sys_cache_control(kCacheFunctionPrepareForExecution, code, size);
+#elif OS(MAC_OS_X)
+        sys_cache_control(kCacheFunctionPrepareForExecution, code, size);
 #else
 #error "The cacheFlush support is missing on this platform."
 #endif

